  `----------------------------------------------------  `User name (OS): Charles Miller  `Date and time: 10/01/13, 16:43:57  `----------------------------------------------------  `Method: maximo_UpdateMaximo  `Description  `  ` Parameters  ` ----------------------------------------------------If (False)Mods_2013_10   `r001 `   `Modified by: Charles Miller (10/1/13 16:43:58)End if READ ONLY(*)InitProcessVar InitPers QUERY([Parameters];[Parameters]ParamCode="max_ExclDistricts")  `identify districts we are not updatingARRAY TEXT($ExclDistricts_atxt;0)ut_TextToArray ([Parameters]Description;->$ExclDistricts_atxt;",")QUERY([Parameters];[Parameters]ParamCode="max_ExclInspType")  `identify inspection types we are not updatingARRAY TEXT($ExclInspectionTypes_atxt;0)ut_TextToArray ([Parameters]Description;->$ExclInspectionTypes_atxt;",")QUERY([Parameters];[Parameters]ParamCode="max_ExclBridgeCat8")  `identify Bridge types we are not updatingARRAY TEXT($ExclBridgeCat_atxt;0)ut_TextToArray ([Parameters]Description;->$ExclBridgeCat_atxt;",")C_DATE($StartReview_d)QUERY([Parameters];[Parameters]ParamCode="max_DBIEStartDate")  `set earliest date for updates$StartReview_d:=Date([Parameters]Description)C_LONGINT($INSPID_L;$FindPosition_L;$Size_L;$LastActivityREFID_L;$TableNumber_L)C_TEXT($BIN_txt;$TeamLeader_txt)C_DATE($InspDate_d)C_TEXT($PFlag_txt)C_BOOLEAN($OkToProceed_b;$NewMaximoInsection_b)Compiler_maximo   `Connect to maximo$OkToProceed_b:=ut_LoadSQLConnectionInfo ("MAXDEV")If (Not($OkToProceed_b))ut_CreateOrUpdateSQLConnectionD ("MAXDEV")End if C_LONGINT($Loop_L;$ElementLoop_L;$StdPhotLoop_L)SQLError_b:=FalseON ERR CALL("SQL_ERROR")SQL LOGIN("ODBC:"+[SQL_Connections]SQL_OBDCName_s;[SQL_Connections]SQL_UserName_s;[SQL_Connections]SQL_Password_s)If (Not(SQLError_b))ARRAY LONGINT($MaximoOurInspectionIDS_aL;0)  `Retreive list of all our inspection ids from maximoSQL EXECUTE("Select inspid from Inspections";$MaximoOurInspectionIDS_aL)While (Not(SQL End selection))SQL LOAD RECORD(SQL All Records )End while SQL CANCEL LOADElse $OkToProceed_b:=FalseEnd if ON ERR CALL("")If (Not(SQLError_b))  `Create set of [Inspections] that are ready to send or have been sent previously to maximoSET QUERY DESTINATION(Into current selection )QUERY([Inspections];[Inspections]UpdateMaximo_L>0;*)QUERY([Inspections]; & ;[Inspections]InspReviewed=BMS Approved )C_LONGINT($NumberInspectionRecords_L)$NumberInspectionRecords_L:=Records in selection([Inspections])$Loop_L:=1C_STRING(50;$TeamLeader_s;$BIN_s)Repeat GOTO SELECTED RECORD([Inspections];$Loop_L)Begin SQL// Also no need to transfer if inspection has no Elements.....// and we should try to load the inspection after it passes the checks that it needs to be transferred// if this might run on server, the ut_loadrecord displays messages - will that screw up the server??????End SQLIf (ut_LoadRecord (->[Inspections];5))QUERY([Bridge MHD NBIS];[Bridge MHD NBIS]BIN=[Inspections]BIN)Case of : (Find in array($ExclDistricts_atxt;[Bridge MHD NBIS]InspResp)>0): (Find in array($ExclBridgeCat_atxt;[Bridge MHD NBIS]Item8 BridgeCat)>0): (Find in array($ExclInspectionTypes_atxt;[Inspections]Insp Type)>0): ([Inspections]InspDBIEApprDate<$StartReview_d)Else $BIN_s:="D"+String(Num([Bridge MHD NBIS]Item2))+"-"+[Bridge MHD NBIS]BDEPT+"-"+[Bridge MHD NBIS]BIN$INSPID_L:=[Inspections]InspID$InspDate_d:=[Inspections]Insp DatePERS_GetInfo ([Inspections]TeamLeader;"LASTNAMEFI";->$TeamLeader_txt)$TeamLeader_txt:=Replace string($TeamLeader_txt;"'";"")$TeamLeader_s:=Substring($TeamLeader_txt;1;50)$FindPosition_L:=Find in array($MaximoOurInspectionIDS_aL;$INSPID_L)$PFlag_txt:="N"If ($FindPosition_L>0)$NewMaximoInsection_b:=FalseElse $NewMaximoInsection_b:=TrueON ERR CALL("SQL_ERROR")SQL EXECUTE("insert into inspections ( inspid, BIN, INSPDATE, TEAMLEADER) values ( :$INSPID_L, :$BIN_s, :$InspDate_d, :$TeamLeader_s) ; ")SQL CANCEL LOADON ERR CALL("")End if ARRAY LONGINT($ElementIDS_aL;0)ON ERR CALL("SQL_ERROR")SQL EXECUTE("Select ELMSAFETYID from ELEMENTSSAFETY where INSPID = :$INSPID_L ";$ElementIDS_aL)While (Not(SQL End selection))SQL LOAD RECORD(SQL All Records )End while SQL CANCEL LOADON ERR CALL("")If (Not(SQLError_b))QUERY([ElementsSafety];[ElementsSafety]InspID=$INSPID_L)C_STRING(100;$ESDesc_s)C_STRING(50;$ESDef_s;$ESPrit_s)C_TEXT($ESComm_txt)C_LONGINT($ESID_L;$ElementDictPos_l)C_BOOLEAN($UpdateRecord_b)$ElementLoop_L:=1Repeat GOTO SELECTED RECORD([ElementsSafety];$ElementLoop_L)If (ut_LoadRecord (->[ElementsSafety];5))$UpdateRecord_b:=TrueCase of : ($NewMaximoInsection_b): ([ElementsSafety]ModTimeStamp_s#"") & ([ElementsSafety]maximo_UpdateTimeStamp_s=""): ([ElementsSafety]ModTimeStamp_s<[ElementsSafety]maximo_UpdateTimeStamp_s)$UpdateRecord_b:=FalseEnd case If ($UpdateRecord_b)$ESID_L:=[ElementsSafety]ElmSafetyID$ESPrit_s:=[ElementsSafety]Priority$ESDef_s:=[ElementsSafety]Deficiency$FindPosition_L:=Find in array($ElementIDS_aL;$ESID_L)$PFlag_txt:="N"If (Length([ElementsSafety]Description)>0)$ESDesc_s:=[ElementsSafety]DescriptionElse $ElementDictPos_l:=Find in array(◊ELMTDICT_ELNum_ai;[ElementsSafety]ElementNo)$ESDesc_s:=◊ELMTDICT_Txt_as{$ElementDictPos_l}End if $ESComm_txt:=Fn_GetTextBlob ([ElementsSafety]ElmComments)$PFlag_txt:="N"If ($FindPosition_L>0)DELETE FROM ARRAY($ElementIDS_aL;$FindPosition_L;1)ON ERR CALL("SQL_ERROR")Begin SQLupdate ELEMENTSSAFETYset DESCRIPTION = :$ESDesc_s, COMMENTS = :$ESComm_txt,DEFICIENCY = :$ESDef_s,PRIORITY = :$ESPrit_sPROCESSED = :$PFlag_txtwhere ELMSAFETYID = :$ESID_L;End SQLON ERR CALL("")Else ON ERR CALL("SQL_ERROR")SQL EXECUTE("insert into ELEMENTSSAFETY (DESCRIPTION, INSPID, COMMENTS, DEFICIENCY, PRIORITY, ELMSAFETYID, PROCESSED ) values ( :$ESDesc_s, :$INSPID_L, :$ESComm_txt, :$ESDef_s, :$ESPrit_s, :$ESID_L, :$PFlag_txt); ")SQL CANCEL LOADON ERR CALL("")End if If (Not(SQLError_b))[ElementsSafety]maximo_UpdateTimeStamp_s:=Substring(ut_ReturnDateFromTimeStamp (Current date;Current time);1;12)SAVE RECORD([ElementsSafety])UNLOAD RECORD([ElementsSafety])End if Else $FindPosition_L:=Find in array($ElementIDS_aL;[ElementsSafety]ElmSafetyID)DELETE FROM ARRAY($ElementIDS_aL;$FindPosition_L;1)End if Else $FindPosition_L:=Find in array($ElementIDS_aL;[ElementsSafety]ElmSafetyID)DELETE FROM ARRAY($ElementIDS_aL;$FindPosition_L;1)End if Until ($ElementLoop_L>$RecordsInElementSafety_L) | (SQLError_b)If (Not(SQLError_b))If (Size of array($ElementIDS_aL)>0)  `there are elements in maximo that we do not have$PFlag_txt:="D"$ElementLoop_L:=1Repeat Begin SQLupdate ELEMENTSSAFETYset PROCESSED = :$PFlag_txtwhere ELMSAFETYID = :$ESID_L;End SQL$ElementLoop_L:=$ElementLoop_L+1Until (($ElementLoop_L>Size of array($ElementIDS_aL)) | SQLError_b)End if   `do we need to delete themEnd if ON ERR CALL("SQL_ERROR")ARRAY LONGINT($StandardPhotoIDS_aL;0)SQL EXECUTE("Select STANDARDPHOTOID from STANDARDPHOTOS where INSPID = :$INSPID_L ";$StandardPhotoIDS_aL)While (Not(SQL End selection))SQL LOAD RECORD(SQL All Records )End while SQL CANCEL LOADON ERR CALL("")If (Not(SQLError_b))QUERY([Standard Photos];[Standard Photos]InspID=$INSPID_L)$RecordsInStdPhoto_L:=Records in selection([Standard Photos])C_STRING(100;$StdPhotoDesciption_s)C_BLOB($StdPhotoPicture_blb)C_LONGINT($StdPhotoID_L)$StdPhotLoop_L:=1Repeat GOTO SELECTED RECORD([Standard Photos];$StdPhotLoop_L)$UpdateRecord_b:=TrueCase of : ($NewMaximoInsection_b): ([Standard Photos]ModTimeStamp_s#"") & ([Standard Photos]maximo_UpdateTimeStamp_s=""): ([Standard Photos]ModTimeStamp_s<[Standard Photos]maximo_UpdateTimeStamp_s)$UpdateRecord_b:=FalseEnd case If ($UpdateRecord_b)If (ut_LoadRecord (->[Standard Photos];5))$StdPhotoID_L:=[Standard Photos]StdPhotoIDCase of : ([Standard Photos]PictType=BMS Photo )$StdPhotoDesciption_s:="Photo ": ([Standard Photos]PictType=BMS Sketch )$StdPhotoDesciption_s:="Sketch ": ([Standard Photos]PictType=BMS Chart )$StdPhotoDesciption_s:="Chart "Else $StdPhotoDesciption_s:="Unknown "End case $StdPhotoDesciption_s:=$StdPhotoDesciption_s+String([Standard Photos]SeqNum)$FindPosition_L:=Find in array($StandardPhotoIDS_aL;$StdPhotoID_L)$PFlag_txt:="N"PICTURE TO BLOB([Standard Photos]Std Photo;$StdPhotoPicture_blb;"JPEG")$PFlag_txt:="N"If ($FindPosition_L>0)DELETE FROM ARRAY($StandardPhotoIDS_aL;$FindPosition_L;1)ON ERR CALL("SQL_ERROR")Begin SQLupdate STANDARDPHOTOSset DESCRIPTION = :$StdPhotoDesciption_s,STANDARDPHOTO = :$StdPhotoPicture_blb, PROCESSED = :$PFlag_txtWHERE STANDARDPHOTOID = $StdPhotoID_L;End SQLON ERR CALL("")Else ON ERR CALL("SQL_ERROR")SQL EXECUTE("insert into STANDARDPHOTOS (STANDARDPHOTOSID, DESCRIPTION, INSPID, STANDARDPHOTO, STANDARDPHOTOID, PROCESSED ) values (STANDARDPHOTOSIDseq.nextval, :$StdPhotoDesciption_s, :$INSPID_L, :$StdPhotoPicture_blb , :$StdPhotoID_L,"+" :$PFlag_txt); ")SQL CANCEL LOADON ERR CALL("")End if If (Not(SQLError_b))[Standard Photos]maximo_UpdateTimeStamp_s:=Substring(ut_ReturnDateFromTimeStamp (Current date;Current time);1;12)SAVE RECORD([Standard Photos])End if UNLOAD RECORD([Standard Photos])Else $FindPosition_L:=Find in array($StandardPhotoIDS_aL;[Standard Photos]StdPhotoID)DELETE FROM ARRAY($StandardPhotoIDS_aL;$FindPosition_L;1)End if Else $FindPosition_L:=Find in array($StandardPhotoIDS_aL;[Standard Photos]StdPhotoID)DELETE FROM ARRAY($StandardPhotoIDS_aL;$FindPosition_L;1)End if $StdPhotLoop_L:=$StdPhotLoop_L+1Until (($StdPhotLoop_L>$RecordsInStdPhoto_L) | (SQLError_b))If (Not(SQLError_b))If (Size of array($StandardPhotoIDS_aL)>0)  `there are elements in maximo that we do not have$PFlag_txt:="D"For ($StdPhotLoop_L;1;Size of array($StandardPhotoIDS_aL))Begin SQLupdate STANDARDPHOTOSset PROCESSED = :$PFlag_txtwhere STANDARDPHOTOID = $StdPhotoID_L;End SQLEnd for End if End if If (Not(SQLError_b))[Inspections]UpdateMaximo_L:=2[Inspections]UpdateMaximo_d:=Current dateEnd if End if UNLOAD RECORD([Inspections])End if End case End if $Loop_L:=$Loop_L+1Until (SQLError_b) | ($Loop_L>$NumberInspectionRecords_L)End if If ($OkToProceed_b)SQL LOGOUTEnd if   `End maximo_UpdateMaximo