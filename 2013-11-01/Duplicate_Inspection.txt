If (False)ÊÊ`Duplicate_InspectionÊÊ`Duplicate the Inspection with its Elements and ImagesÊÊ`Created January-2005Mods_2004_VN03 Mods_2005_CM03 Mods_2005_CM06 Mods_2005_CM15 Mods_2005_CM17 ÊÊ` Modified by: costasmanousakis-(Designer)-(1/4/2006 11:58:01)Mods_2006_CM01 ÊÊ` Modified by: costasmanousakis-(Designer)-(2/17/2006 13:37:19)Mods_2006_CM03 ÊÊ` Modified by: costasmanousakis-(Designer)-(2/21/2006 09:13:52)Mods_2006_CM03 ÊÊ` Modified by: costasmanousakis-(Designer)-(4/19/2006 15:01:56)Mods_2006_CMy2 ÊÊ` Modified by: costasmanousakis-(Designer)-(5/18/2006 16:03:47)Mods_2006_CM04 ÊÊ` Modified by: costasmanousakis-(Designer)-(5/21/2007 10:26:58)Mods_2007_CM10 ÊÊ` Modified by: costasmanousakis-(Designer)-(4/22/08 15:05:16)Mods_2008_CM_5403 ÊÊ`Adjust create/modify timestamps ; clear review datesÊÊ` Modified by: costasmanousakis-(Designer)-(10/2/08 16:51:16)Mods_2008_CM_5404 ÊÊ`Don't clear the [inspections]agency; it is set in the call to G_SIA2InspectionÊÊ` Modified by: costasmanousakis-(Designer)-(3/10/09 14:27:37)Mods_2009_03 ÊÊ`ÊÊ`Use the current user as the default team leaderÊÊ` Modified by: costasmanousakis-(Designer)-(2/26/10 17:01:00)Mods_2010_02 ÊÊ`ÊÊ`Mods for Bridge Inspection  HIMods_2011_06 ÊÊ` CJ Miller`06/14/11, 10:44:47      ` Type all local variables for v11ÊÊ` Modified by: Costas Manousakis-(Designer)-(11/2/12 14:25:45)Mods_2012_11 ÊÊ`ÊÊ`Clear all review commentsÊÊ` Modified by: Costas Manousakis-(Designer)-(2/12/13 10:52:50)Mods_2013_02 ÊÊ`ÊÊ`Clear the in-depth review flag alsoÊÊ` Modified by: Costas Manousakis-(Designer)-(4/29/13 16:58:00)Mods_2013_04 ÊÊ`ÊÊ`Added copying of TunnelInspection record if any; Also use loglink only if the link field is not 0ÊÊ` Modified by: Costas Manousakis-(Designer)-(10/24/13 11:19:39)Mods_2013_10 ÊÊ`ÊÊ`use  method  INSP_IsInspRoutine_b to check if inspection is a routine oneEnd if C_LONGINT($oldInspID;$NoElmts;$NoImgs;$i;$j)C_LONGINT($InspTable;$ElmtTable;$ImgTable)C_LONGINT($Num_I_Fields;$Num_El_Fields;$Num_Img_Fields)C_TEXT($msg)C_STRING(40;$FieldName)C_BOOLEAN($1;$vbSpecialInspFlag)C_LONGINT($vlNBISInspectionID;$vlBMSInspectionID;$vlCombInspectionID)C_LONGINT(vInsptoCopy)ÊÊ`used for [BMS Inspections] idÊÊ`Special Inspection Flag duplicated from Combined Inspection$vbSpecialInspFlag:=$1C_BOOLEAN($vbNormalCopy)$vbNormalCopy:=TrueIf (False)If (Current user="Designer")CONFIRM("Duplicate Inspection AS IS or do normal duplicate?";"AS IS";"NORMAL COPY")If (OK=1)$vbNormalCopy:=FalseEnd if End if Else $vbNormalCopy:=Not(DupInsp_CopyAsIS_L=1)End if SET CURSOR(4)SHORT_MESSAGE ("Starting duplication of inspection...")ÊÊ`Get the Table Number of [Inspections] table$InspTable:=Table(->[Inspections])$Num_I_Fields:=Get last field number($InspTable)ARRAY POINTER($a_Ptr_InspFields;$Num_I_Fields)For ($i;1;$Num_I_Fields)$a_Ptr_InspFields{$i}:=Field($InspTable;$i)End for $ElmtTable:=Table(->[ElementsSafety])$Num_El_Fields:=Get last field number(->[ElementsSafety])ARRAY POINTER($a_Ptr_ElFields;$Num_El_Fields)For ($i;1;$Num_El_Fields)$a_Ptr_ElFields{$i}:=Field($ElmtTable;$i)End for $ImgTable:=Table(->[Standard Photos])$Num_Img_Fields:=Get last field number(->[Standard Photos])ARRAY POINTER($a_Ptr_ImgFields;$Num_Img_Fields)For ($i;1;$Num_Img_Fields)$a_Ptr_ImgFields{$i}:=Field($ImgTable;$i)End for C_LONGINT($Num_Tinsp_Fields)$ImgTable:=Table(->[TunnelInspection])$Num_Tinsp_Fields:=Get last field number(->[TunnelInspection])ARRAY POINTER($a_Ptr_TinspFields;$Num_Tinsp_Fields)For ($i;1;$Num_Tinsp_Fields)$a_Ptr_TinspFields{$i}:=Field($ImgTable;$i)End for MESSAGE(×sCR+"   Copying Inspection ...")RELATE ONE([Combined Inspections]NBISInspID)RELATE ONE([Combined Inspections]BMSInspID)vInsptoCopy:=[Combined Inspections]BMSInspIDÊÊ` save the BMS id to copy before dupIf (vInsptoCopy=0)vInsptoCopy:=-1ÊÊ`make sure it is -1End if ÊÊ`Save the Current inspection selectionCOPY NAMED SELECTION([Inspections];"OldInspections")$oldInspID:=[Inspections]InspIDDUPLICATE RECORD([Inspections])[Inspections]InspID:=0Inc_Sequence ("Inspections";->[Inspections]InspID)ÊÊ`Duplicate Special Inspection from Combined InspectionÊÊ`Added on 01/12/05If ($vbSpecialInspFlag)[Inspections]Insp Type:="CMI"End if If ($vbNormalCopy)MESSAGE(×sCR+"   Configuring Inspection...")ÊÊ`add this to avoid errors in G_SIA2Inspection from PushChange calls ÊÊ`- stack is reinited later for all fieldsInitChangeStack (1)ÊÊ`SJH 04/22/2004 Apply new default font style to Inspection Comments     C_STRING(132;vInspFontName)C_INTEGER(vInspFontSize)vInspFontName:="Arial"vInspFontSize:=11C_LONGINT($temparea)$temparea:=WR New offscreen area ÊÊ`off screen area is deleted after ElementSafety comments are convertedIf (BLOB size([Inspections]InspComments)>0)WR INSERT STYLED TEXT ($temparea;[Inspections]InspComments)WR EXECUTE COMMAND ($temparea;wr cmd select all )WR SET FONT ($temparea;vInspFontName)WR SET TEXT PROPERTY ($temparea;wr font size ;vInspFontSize)[Inspections]InspComments:=WR Get styled text ($temparea)WR DELETE SELECTION ($temparea)End if ÊÊ`Update Dates  and info from [Bridge MHD NBIS] tableG_SIA2Inspection TimeStamp (->[Inspections];->[Inspections]DateCreated;->[Inspections]TimeCreated;->[Inspections]DateModified;->[Inspections]TimeModified)[Inspections]Insp Date:=Current date(*)[Inspections]Modified By:=Current user[Inspections]DateCreated:=Current date(*)[Inspections]TimeCreated:=Current time(*)[Inspections]DateModified:=Current date(*)[Inspections]TimeModified:=Current time(*)ÊÊ`Now mark inspection as incomplete and not approved[Inspections]InspComplete:=False[Inspections]InspApproved:=BMS Not Reviewed [Inspections]InspReviewed:=BMS Not Reviewed [Inspections]InspAreaEngApprDate:=!00/00/00![Inspections]InspDBIEApprDate:=!00/00/00![Inspections]ConsScoring:=0[Inspections]ConsScoreCmts:=""[Inspections]ConsAcceptanceDate:=!00/00/00![Inspections]TeamLeader:=0[Inspections]DBrInspEngr:=0[Inspections]ConsQCEngrID:=0ÊÊ`[Inspections]Agency:=""[Inspections]RatingFeedBack:=""[Inspections]Rerating:=False[Inspections]RatingPriority:=""[Inspections]RatingTxt:=""[Inspections]InitialInsp:=False[Inspections]InspApprCmts:=""[Inspections]InspRevCmts:=""[Inspections]InDepthReview:=0If (×CurrentUser_PID>0)[Inspections]TeamLeader:=×CurrentUser_PIDEnd if ÊÊ`save the recordEnd if ÊÊ`IF Normal CopySAVE RECORD([Inspections])$vlNBISInspectionID:=[Inspections]InspIDÊÊ`Log record of new inspection hereLogNewRecord (->[Bridge MHD NBIS]BIN;->[Inspections]BIN;->[Inspections]InspID;1;"Inspections")ÊÊ`Log stuff for all the fields in the Insp record.InitChangeStack (1)C_INTEGER($viFldType)C_TEXT($vtSkipFields)$vtSkipFields:=";InspID;BIN;"If (Substring(×Version;1;(Position(" ";×Version)-1))<"5.0")$vtSkipFields:=$vtSkipFields+"InspRtnSpcMemFlag"+";"End if For ($i;1;$Num_I_Fields)$FieldName:=Field name($a_Ptr_InspFields{$i})If (Position((";"+$FieldName+";");$vtSkipFields)=0)ÊÊ`Skip BIN and INSPIDGET FIELD PROPERTIES($a_Ptr_InspFields{$i};$viFldType)If ($viFldType#Is Subtable )ÊÊ`AND subtablesPushChange (1;$a_Ptr_InspFields{$i})End if End if End for FlushGrpChgs (1;->[Bridge MHD NBIS]BIN;->[Inspections]BIN;->[Inspections]InspID;1)If ([Inspections]TeamLeader#0)LogLink (->[Inspections]TeamLeader;->[Bridge MHD NBIS]BIN;->[Inspections]BIN;->[Inspections]InspID;1;->[Personnel]Person ID)Else LogChanges (->[Inspections]TeamLeader;->[Bridge MHD NBIS]BIN;->[Inspections]BIN;->[Inspections]InspID;1)End if If ([Inspections]ConsQCEngrID#0)LogLink (->[Inspections]ConsQCEngrID;->[Bridge MHD NBIS]BIN;->[Inspections]BIN;->[Inspections]InspID;1;->[Personnel]Person ID)Else LogChanges (->[Inspections]ConsQCEngrID;->[Bridge MHD NBIS]BIN;->[Inspections]BIN;->[Inspections]InspID;1)End if If ([Inspections]DBrInspEngr#0)LogLink (->[Inspections]DBrInspEngr;->[Bridge MHD NBIS]BIN;->[Inspections]BIN;->[Inspections]InspID;1;->[Personnel]Person ID)Else LogChanges (->[Inspections]DBrInspEngr;->[Bridge MHD NBIS]BIN;->[Inspections]BIN;->[Inspections]InspID;1)End if ÊÊ`do the tunnelinsp record if anyQUERY([TunnelInspection];[TunnelInspection]InspID=$oldInspID)If (Records in selection([TunnelInspection])=1)LOAD RECORD([TunnelInspection])DUPLICATE RECORD([TunnelInspection])[TunnelInspection]TunnelInspID_L:=0Inc_Sequence ("TunnelInspections";->[TunnelInspection]TunnelInspID_L)$vtSkipFields:=";TunnelInspID_L;InspID;"[TunnelInspection]InspID:=$vlNBISInspectionIDIf ($vbNormalCopy)MESSAGE(×sCR+"   Configuring Tunnel Inspection info...")[TunnelInspection]QA_QC_L:=TNL_QAQCEngr_L TNL_SIA_Insp ("SIA2INSP")End if ÊÊ`IF Normal CopySAVE RECORD([TunnelInspection])LogNewRecord (->[Inspections]InspID;->[TunnelInspection]InspID;->[TunnelInspection]TunnelInspID_L;2;"TunnelInspections")InitChangeStack (1)For ($j;1;$Num_Tinsp_Fields)$FieldName:=Field name($a_Ptr_TinspFields{$j})If (Position((";"+$FieldName+";");$vtSkipFields)=0)ÊÊ`Skip  IdsPushChange (1;$a_Ptr_TinspFields{$j})End if End for FlushGrpChgs (1;->[Inspections]InspID;->[TunnelInspection]InspID;->[TunnelInspection]TunnelInspID_L;2)If ([TunnelInspection]QA_QC_L#0)LogLink (->[TunnelInspection]QA_QC_L;->[Inspections]InspID;->[TunnelInspection]InspID;->[TunnelInspection]TunnelInspID_L;2;->[Personnel]Person ID)Else LogChanges (->[TunnelInspection]QA_QC_L;->[Inspections]InspID;->[TunnelInspection]InspID;->[TunnelInspection]TunnelInspID_L;2)End if End if ÊÊ`Get back the previous Inspection If (False)USE NAMED SELECTION("OldInspections")RELATE MANY([Inspections]InspID)Else QUERY([ElementsSafety];[ElementsSafety]InspID=$oldInspID)QUERY([Standard Photos];[Standard Photos]InspID=$oldInspID)End if ÊÊ`Collect the Safety Elements for the old Inspection$NoElmts:=Records in selection([ElementsSafety])COPY NAMED SELECTION([ElementsSafety];"OldElements")MESSAGE(×sCR+"   Copying "+String($NoElmts)+" Insp Elmts...")ÊÊ`Modified on 01/12/2005For ($i;1;$NoElmts)MESSAGE("..."+String($i))Case of : (($vbSpecialInspFlagÊ&Ê[ElementsSafety]SpecMemb Flag)Ê|ÊNot($vbSpecialInspFlag))DUPLICATE RECORD([ElementsSafety])[ElementsSafety]ElmSafetyID:=0Inc_Sequence ("ElementsSafety";->[ElementsSafety]ElmSafetyID)[ElementsSafety]InspID:=$vlNBISInspectionIDÊÊ`SJH 04/22/2004 Apply new default fonts to Element Comments        If (([ElementsSafety]Comment Flag=True)Ê&Ê($vbNormalCopy))ÊÊ`do this only if we are copying normallyWR INSERT STYLED TEXT ($temparea;[ElementsSafety]ElmComments)WR EXECUTE COMMAND ($temparea;wr cmd select all )WR SET FONT ($temparea;vInspFontName)WR SET TEXT PROPERTY ($temparea;wr font size ;vInspFontSize)[ElementsSafety]ElmComments:=WR Get styled text ($temparea)WR DELETE SELECTION ($temparea)End if SAVE RECORD([ElementsSafety])ÊÊ`Log the new record and its dataLogNewRecord (->[Inspections]InspID;->[ElementsSafety]InspID;->[ElementsSafety]ElmSafetyID;2;"ElementsSafety")InitChangeStack (1)For ($j;1;$Num_El_Fields)$FieldName:=Field name($a_Ptr_ElFields{$j})If (($FieldName#"InspID")Ê&Ê($FieldName#"ElmSafetyID"))ÊÊ`Skip IdsPushChange (1;$a_Ptr_ElFields{$j})End if End for FlushGrpChgs (1;->[Inspections]InspID;->[ElementsSafety]InspID;->[ElementsSafety]ElmSafetyID;2)USE NAMED SELECTION("OldElements")End case NEXT RECORD([ElementsSafety])COPY NAMED SELECTION([ElementsSafety];"OldElements")ÊÊ`Dec-2001 : need to do this to keep track of current record  End for CLEAR NAMED SELECTION("OldElements")WR DELETE OFFSCREEN AREA ($temparea)ÊÊ`used to change the font style of comments$NoImgs:=Records in selection([Standard Photos])If ((DupInsp_CopyPhotos_L+DupInsp_CopySketches_L+DupInsp_CopyCharts_L)=0)$NoImgs:=0End if If ($NoImgs>0)MESSAGE(×sCR+"   Copying "+String($NoImgs)+" Images...")COPY NAMED SELECTION([Standard Photos];"OldImages")For ($i;1;$NoImgs)Case of : (([Standard Photos]PictType=BMS Photo )Ê&Ê(DupInsp_CopyPhotos_L=0)): (([Standard Photos]PictType=BMS Sketch )Ê&Ê(DupInsp_CopySketches_L=0)): (([Standard Photos]PictType=BMS Chart )Ê&Ê(DupInsp_CopyCharts_L=0))Else MESSAGE("..."+String($i))DUPLICATE RECORD([Standard Photos])[Standard Photos]StdPhotoID:=0Inc_Sequence ("StandardPhotos";->[Standard Photos]StdPhotoID)[Standard Photos]InspID:=$vlNBISInspectionIDSAVE RECORD([Standard Photos])ÊÊ` log the change/duplication hereLogNewRecord (->[Inspections]InspID;->[Standard Photos]InspID;->[Standard Photos]StdPhotoID;2;"StandardPhotos")InitChangeStack (1)For ($j;1;$Num_Img_Fields)$FieldName:=Field name($a_Ptr_ImgFields{$j})If (($FieldName#"InspID")Ê&Ê($FieldName#"StdPhotoID"))ÊÊ`Skip IdsPushChange (1;$a_Ptr_ImgFields{$j})End if End for FlushGrpChgs (1;->[Inspections]InspID;->[Standard Photos]InspID;->[Standard Photos]StdPhotoID;2)End case USE NAMED SELECTION("OldImages")NEXT RECORD([Standard Photos])COPY NAMED SELECTION([Standard Photos];"OldImages")ÊÊ`Dec-2001 : need to do this to keep track of current recordEnd for CLEAR NAMED SELECTION("OldImages")End if CLEAR NAMED SELECTION("OldInspections")ÊÊ`***************************************************************ÊÊ`2005-02-28 ASLÊÊ`Duplicated the BMS Inspection if it exists.If ((vInsptoCopy#-1)Ê&ÊNot($vbSpecialInspFlag))MESSAGE(×sCR+"   Copying Pontis...")ÊÊ`2005-02-18 ASLÊÊ`Duplicate the BMS InspectionQUERY([BMS Inspections];[BMS Inspections]Inspection ID=vInsptoCopy)ÊÊ`Duplicate the Pontis record.DUPLICATE RECORD([BMS Inspections])ÊÊ`This is a new record.    Inc_Sequence ("Pontis Insp ID";->[BMS Inspections]Inspection ID)ÊÊ`Save the BMS Inspection ID for later$vlBMSInspectionID:=[BMS Inspections]Inspection IDIf ($vbNormalCopy)[BMS Inspections]BIN:=[Bridge MHD NBIS]BIN[BMS Inspections]Insp Date:=Current date(*)[BMS Inspections]Span Group No:=1[BMS Inspections]Metric:=FalseÊÊ`Change this default after all old inspections are entered.[BMS Inspections]TeamLeader:=[Inspections]TeamLeader[BMS Inspections]DBrInspEngr:=0TimeStamp (->[BMS Inspections];->[BMS Inspections]DateCreated;->[BMS Inspections]TimeCreated;->[BMS Inspections]DateModified;->[BMS Inspections]TimeModified)[BMS Inspections]Modified By:=Current userEnd if SAVE RECORD([BMS Inspections])ÊÊ`Record the log.LogNewRecord (->[Bridge MHD NBIS]BIN;->[BMS Inspections]BIN;->[BMS Inspections]Inspection ID;1;"Pontis Insp ID")InitChangeStack (1)ÊÊ`need this for the InitChangeStack(2)'s in DUPLIC_INSP_NEWÊÊ`Duplicate the set of element records for the inspection selected to be copied  DUPLIC_INSP_NEW (True)ÊÊ`True : To enable messagesINSP_HICalcControl ("ALL";1)ÊÊ`Do a complete calculation - use stack 1 for changesÊÊ`The field Metric may have been updated, so save it.SAVE RECORD([BMS Inspections])$InspTable:=Table(->[BMS Inspections])$Num_I_Fields:=Get last field number($InspTable)$vtSkipFields:=";Inspection ID;BIN;"For ($i;1;$Num_I_Fields)$FieldName:=Field name($InspTable;$i)If (Position((";"+$FieldName+";");$vtSkipFields)=0)GET FIELD PROPERTIES($InspTable;$i;$viFldType)If ($viFldType#Is Subtable )ÊÊ`AND subtablesPushChange (1;Field($InspTable;$i))End if End if End for FlushGrpChgs (1;->[Bridge MHD NBIS]BIN;->[BMS Inspections]BIN;->[BMS Inspections]Inspection ID;1)LogLink (->[BMS Inspections]TeamLeader;->[Bridge MHD NBIS]BIN;->[BMS Inspections]BIN;->[BMS Inspections]Inspection ID;1;->[Personnel]Person ID)Else $vlBMSInspectionID:=-1End if If (Not($vbNormalCopy))ÊÊ`copy also team membersQUERY([Field Trip];[Field Trip]InspID=$oldInspID)C_LONGINT($NoTeamMbrs)ARRAY INTEGER($arTeamMbrs;0)SELECTION TO ARRAY([Field Trip]Person ID;$arTeamMbrs)$NoTeamMbrs:=Size of array($arTeamMbrs)If ($NoTeamMbrs>0)MESSAGE(×sCR+"   Copying "+String($NoTeamMbrs)+" Insp Team Members...")For ($i;1;$NoTeamMbrs)MESSAGE("..."+String($i))CREATE RECORD([Field Trip])[Field Trip]InspID:=[Inspections]InspID[Field Trip]Person ID:=$arTeamMbrs{$i}LogNewRecord (->[Inspections]InspID;->[Field Trip]InspID;->[Field Trip]Person ID;3;"";->[Personnel]Person ID)SAVE RECORD([Field Trip])End for If ($vlBMSInspectionID>0)MESSAGE(×sCR+"   Copying "+String($NoTeamMbrs)+" Pontis Team Members...")For ($i;1;$NoTeamMbrs)MESSAGE("..."+String($i))CREATE RECORD([BMS Field Trip])[BMS Field Trip]Inspection ID:=[BMS Inspections]Inspection ID[BMS Field Trip]Person ID:=$arTeamMbrs{$i}LogNewRecord (->[BMS Inspections]Inspection ID;->[BMS Field Trip]Inspection ID;->[BMS Field Trip]Person ID;3;"";->[Personnel]Person ID)SAVE RECORD([BMS Field Trip])End for End if End if End if MESSAGE(×sCR+" Linking...")ÊÊ`Add a record for a new combined inspection  CREATE RECORD([Combined Inspections])Inc_Sequence ("CombinedInspections";->[Combined Inspections]ID)$vlCombInspectionID:=[Combined Inspections]ID[Combined Inspections]BIN:=[Bridge MHD NBIS]BINÊÊ`2004-08-03 ASLÊÊ`This should be a fixed parent record and relative local recordLogNewRecord (->[Bridge MHD NBIS]BIN;->[Combined Inspections]BIN;->[Combined Inspections]ID;1;"CombinedInspections")InitChangeStack (1)[Combined Inspections]InspDate:=[Inspections]Insp Date[Combined Inspections]InspType:=[Inspections]Insp TypePushChange (1;->[Combined Inspections]InspDate)PushChange (1;->[Combined Inspections]InspType)FlushGrpChgs (1;->[Bridge MHD NBIS]BIN;->[Combined Inspections]BIN;->[Combined Inspections]ID;1)[Combined Inspections]NBISInspID:=$vlNBISInspectionIDÊÊ`This is a relative fieldLogLink (->[Combined Inspections]NBISInspID;->[Bridge MHD NBIS]BIN;->[Combined Inspections]BIN;->[Combined Inspections]ID;1)[Combined Inspections]BMSInspID:=$vlBMSInspectionIDÊÊ`This is a relative fieldLogLink (->[Combined Inspections]BMSInspID;->[Bridge MHD NBIS]BIN;->[Combined Inspections]BIN;->[Combined Inspections]ID;1)SAVE RECORD([Combined Inspections])ÊÊ`Load the new record that just duplicatedQUERY([Combined Inspections];[Combined Inspections]ID=$vlCombInspectionID)ÊÊ`RELATE ONE([Combined Inspections])QUERY([Inspections];[Inspections]InspID=[Combined Inspections]NBISInspID)QUERY([BMS Inspections];[BMS Inspections]Inspection ID=[Combined Inspections]BMSInspID)COPY NAMED SELECTION([Combined Inspections];"curCombinedInspection")InitChangeStack (1)If (INSP_IsInspRoutine_b )MESSAGE(×sCR+" Updating UW values...")INSP_GetUWValues_Btn (False)End if MESSAGE(×sCR+" Updating Rating values...")G_InspGetRatings (False)FlushGrpChgs (1;->[Bridge MHD NBIS]BIN;->[Inspections]BIN;->[Inspections]InspID;1)SAVE RECORD([Inspections])USE NAMED SELECTION("curCombinedInspection")ÊÊ`QUERY([Inspections];[Inspections]InspID=[Combined Inspections]NBISInspID)ÊÊ`QUERY([BMS Inspections];[BMS Inspections]Inspection ID=[Combined Inspections]BMSInspID)CLOSE WINDOWSET CURSOR(0)INPUT FORM([Inspections];"BlankCombinedStarter")MODIFY RECORD([Inspections])