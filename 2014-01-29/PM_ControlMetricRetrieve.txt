ÊÊ` ----------------------------------------------------ÊÊ` PM_ControlMetricRetrieveÊÊ` User name (OS): charlesmillerÊÊ` Date and time: 05/22/09, 14:21:43ÊÊ` ----------------------------------------------------ÊÊ` DescriptionÊÊ` ÊÊ`ÊÊ` ParametersÊÊ` ----------------------------------------------------If (False)Mods_2009_05 ÊÊ`r002  `05/22/09, 14:21:45 `Add code and tables to retrieve pontis simulation dataMods_2009_06 ÊÊ`r003 `06/02/09, 14:06:08   `Modify Pontis retrieveÊÊ`Add code to allow for deletion of a runÊÊ`Add code to log what occurred during runMods_2011_06 ÊÊ` CJ Miller`06/14/11, 13:25:05      ` Type all local variables for v11ÊÊ` Modified by: manousakisc (12/24/2013)Mods_2013_12 ÊÊ`ÊÊ`added a SAVE RECORD after each CREATE RECORD([Pontis_Metric_Data]) - without it, it kept using the same record.End if READ ONLY(*)C_LONGINT($Width_l;$Height_l;$Win_l)GET FORM PROPERTIES([Pontis_Metrics];"PontisImport.dlg";$Width_l;$Height_l)$Win_l:=ut_OpenNewWindow ($Width_l;$Height_l;0;5;"Pontis Metric Import";"ut_CloseCancel")DIALOG([Pontis_Metrics];"PontisImport.dlg")CLOSE WINDOWIf (OK=1)ÊÊ`we are going to proceedREAD WRITE([Pontis_Metrics])READ WRITE([Pontis_Metric_Data])C_LONGINT($TotalDataCount_l;$Loop_l;$InnerLoop_l;$PMRunKey_l;$SizeOfArray_l;$MetricUpdate_l;$MetricAdd_l;$MetricDataUpdate_l;$MetricDataAdd_l)C_BOOLEAN($UpdateMetrtics_b;$OkToProceed_b)C_DATE($Current_d)C_TEXT($FileName_txt;$Path_txt;$DocumentData_txt)$Path_txt:="F:\\Pontis_Simulation\\"If (Test path name($Path_txt)=0)Else CREATE FOLDER($Path_txt)End if $FileName_txt:=$Path_txt+"Pontis-"+Substring(ut_CreateTimeStamp ;1;12)+".txt"PM_ControlLogDocument ("C";->$FileName_txt)If (PM_DeleteRun_l=1)$OkToProceed_b:=True$DocumentData_txt:="Delete Run start "+String(Current date;Internal date short )+" "+String(Current time(*);HH MM SS )+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)QUERY([Pontis_Metrics];[Pontis_Metrics]PM_ImportDate_d=PM_ImportDate_ad{PM_ImportDate_ad})If (Records in selection([Pontis_Metrics])>0)FIRST RECORD([Pontis_Metrics])$PMRunKey_l:=[Pontis_Metrics]PM_RunKey_lElse $OkToProceed_b:=FalseEnd if If ($OkToProceed_b)ARRAY STRING(15;$UniqueKeys_as;0)QUERY([Pontis_Metrics];[Pontis_Metrics]PM_RunKey_l=$PMRunKey_l)SELECTION RANGE TO ARRAY(1;Records in selection([Pontis_Metrics]);[Pontis_Metrics]PM_UniqueKey_s;$UniqueKeys_as)QUERY WITH ARRAY([Pontis_Metric_Data]PM_UNiqueKey_s;$UniqueKeys_as)$DocumentData_txt:="Deleting "+String(Records in selection([Pontis_Metrics]))+" Pontis Metric and "+String(Records in selection([Pontis_Metric_Data]))+" associated metric data records"+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)Repeat DELETE SELECTION([Pontis_Metrics])If (Records in set("LockedSet")>0)uT_DelayUserProcess USE SET("LockedSet")End if Until (Records in set("LockedSet")=0)Repeat DELETE SELECTION([Pontis_Metric_Data])If (Records in set("LockedSet")>0)uT_DelayUserProcess USE SET("LockedSet")End if Until (Records in set("LockedSet")=0)ALERT("Deleted Run imported on date "+String(PM_ImportDate_ad{PM_ImportDate_ad}))Else ALERT("No Records found for selected date")$DocumentData_txt:="No records found for date "+String(PM_ImportDate_ad{PM_ImportDate_ad})+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)End if Else $Current_d:=Current date(*)$UpdateMetrtics_b:=False$OkToProceed_b:=False$MetricUpdate_l:=0$MetricAdd_l:=0$MetricDataUpdate_l:=0$MetricDataAdd_l:=0$TotalDataCount_l:=0Repeat $OkToProceed_b:=ut_LoadSQLConnectionInfo ("Pontis")If (Not($OkToProceed_b))ut_CreateOrUpdateSQLConnectionD ("Pontis")End if Until ($OkToProceed_b)If (PM_ReRun_l=1)$DocumentData_txt:="Update Run start "+String(Current date;Internal date short )+" "+String(Current time(*);HH MM SS )+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)$UpdateMetrtics_b:=TrueQUERY([Pontis_Metrics];[Pontis_Metrics]PM_ImportDate_d=PM_ImportDate_ad{PM_ImportDate_ad})If (Records in selection([Pontis_Metrics])>0)FIRST RECORD([Pontis_Metrics])$PMRunKey_l:=[Pontis_Metrics]PM_RunKey_lElse $DocumentData_txt:="Update Run failed - no records found "+String(Current date;Internal date short )+" "+String(Current time(*);HH MM SS )+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)$OkToProceed_b:=FalseEnd if $Current_d:=PM_ImportDate_ad{PM_ImportDate_ad}Else $DocumentData_txt:="Import Run start "+String(Current date;Internal date short )+" "+String(Current time(*);HH MM SS )+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)Inc_Sequence ("PM_RunKey_l";->$PMRunKey_l)$OkToProceed_b:=TrueEnd if C_STRING(3;PM_Bin_s)C_TIME($StartTime_tm;$RemainingTime_tm)REDUCE SELECTION([Pontis_Metrics];0)ARRAY DATE(PM_ImportDate_ad;0)If ($OkToProceed_b)READ WRITE([Pontis_Metrics])READ WRITE([Pontis_Metric_Data])If (SQL_Connect )C_LONGINT($win)$win:=ut_OpenNewWindow (500;200;5;4;"Updating Pontis Metrics")$StartTime_tm:=Current time(*)If (SQL_Do ("sp_RTRV_PontisMetric";"Built"))$SizeOfArray_l:=Size of array(PM_BRKey_atxt)$DocumentData_txt:="Retrieved "+String($SizeOfArray_l)+"[Pontis_Metrics] records"+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)For ($Loop_l;1;$SizeOfArray_l)GOTO XY(5;2)MESSAGE("Updating "+String($Loop_l)+" out of "+String($SizeOfArray_l))GOTO XY(5;5)$RemainingTime_tm:=(($SizeOfArray_l/$Loop_l)-1)*(Current time(*)-$StartTime_tm)MESSAGE("Estimated time remaining is "+Time string($RemainingTime_tm))GOTO XY(5;7)MESSAGE("Elapsed time is "+Time string(Current time(*)-$StartTime_tm))PM_Bin_s:=Substring(PM_BRKey_atxt{$Loop_l};7;3)If ($UpdateMetrtics_b)QUERY([Pontis_Metrics];[Pontis_Metrics]PM_ImportDate_d=$Current_d;*)QUERY([Pontis_Metrics];[Pontis_Metrics]PM_Bin_s=PM_Bin_s)If (Records in selection([Pontis_Metrics])=0)PM_CreateMetricRecord (->$PMRunKey_l;->$Current_d;->PM_SCKey_as{$Loop_l};->PM_TEV_al{$Loop_l})$MetricAdd_l:=$MetricAdd_l+1End if Else $MetricAdd_l:=$MetricAdd_l+1PM_CreateMetricRecord (->$PMRunKey_l;->$Current_d;->PM_SCKey_as{$Loop_l};->PM_TEV_al{$Loop_l})End if If (ut_LoadRecord (->[Pontis_Metrics]))End if C_BOOLEAN($UpdateRecord_b)$UpdateRecord_b:=TrueCase of : (Not([Pontis_Metrics]PM_SCKey_s=PM_SCKey_as{$Loop_l})): (Not([Pontis_Metrics]PM_Tev_l=PM_TEV_al{$Loop_l}))Else $UpdateRecord_b:=FalseEnd case If ($UpdateRecord_b)If (Record number([Pontis_Metrics])#New record )$MetricUpdate_l:=$MetricUpdate_l+1End if [Pontis_Metrics]PM_SCKey_s:=PM_SCKey_as{$Loop_l}[Pontis_Metrics]PM_Tev_l:=PM_TEV_al{$Loop_l}SAVE RECORD([Pontis_Metrics])End if PM_BRKey_txt:=PM_BRKey_atxt{$Loop_l}C_LONGINT(PM_NumberofRows_l)PM_NumberofRows_l:=15If (SQL_Do ("sp_RTRV_Metricdata";"Built"))If (Size of array(PM_ADT_al)>0)PM_NumberofRows_l:=Size of array(PM_ADT_al)$TotalDataCount_l:=$TotalDataCount_l+PM_NumberofRows_lIf ($UpdateMetrtics_b)SET QUERY DESTINATION(Into set ;"Metric_Data_Set")QUERY([Pontis_Metric_Data];[Pontis_Metric_Data]PM_UNiqueKey_s=[Pontis_Metrics]PM_UniqueKey_s)End if SET QUERY DESTINATION(Into current selection )For ($InnerLoop_l;1;PM_NumberofRows_l)If ($UpdateMetrtics_b)USE SET("Metric_Data_Set")QUERY SELECTION([Pontis_Metric_Data];[Pontis_Metric_Data]PMD_YKey_l=PM_YKey_al{$InnerLoop_l})If (Records in selection([Pontis_Metric_Data])=0)CREATE RECORD([Pontis_Metric_Data])[Pontis_Metric_Data]PM_UNiqueKey_s:=[Pontis_Metrics]PM_UniqueKey_s$MetricDataAdd_l:=$MetricDataAdd_l+1SAVE RECORD([Pontis_Metric_Data])End if Else $MetricDataAdd_l:=$MetricDataAdd_l+1CREATE RECORD([Pontis_Metric_Data])[Pontis_Metric_Data]PM_UNiqueKey_s:=[Pontis_Metrics]PM_UniqueKey_sSAVE RECORD([Pontis_Metric_Data])End if If (ut_LoadRecord (->[Pontis_Metric_Data]))End if $UpdateRecord_b:=TrueCase of : (Not([Pontis_Metric_Data]PMD_ADT_l=PM_ADT_al{$InnerLoop_l})): (Not([Pontis_Metric_Data]PMD_ADT_l=PM_ADT_al{$InnerLoop_l})): (Not([Pontis_Metric_Data]PMD_ADT_l=PM_ADT_al{$InnerLoop_l})): (Not([Pontis_Metric_Data]PMD_CIX_Bear_r=PM_CIX_Bear_ar{$InnerLoop_l})): (Not([Pontis_Metric_Data]PMD_CIX_Deck_r=PM_CIX_Deck_ar{$InnerLoop_l})): (Not([Pontis_Metric_Data]PMD_CIX_Joint_r=PM_CIX_Joint_ar{$InnerLoop_l})): (Not([Pontis_Metric_Data]PMD_CIX_Sub_r=PM_CIX_Sub_ar{$InnerLoop_l})): (Not([Pontis_Metric_Data]PMD_CIX_Supr_r=PM_CIX_Supr_ar{$InnerLoop_l})): (Not([Pontis_Metric_Data]PMD_Hindex_r=PM_Hindex_ar{$InnerLoop_l})): (Not([Pontis_Metric_Data]PMD_PTIndex_r=PM_PTIndex_ar{$InnerLoop_l})): (Not([Pontis_Metric_Data]PMD_YKey_l=PM_YKey_al{$InnerLoop_l}))Else $UpdateRecord_b:=FalseEnd case If ($UpdateRecord_b)If (Record number([Pontis_Metric_Data])#New record )$MetricDataUpdate_l:=$MetricDataUpdate_l+1End if [Pontis_Metric_Data]PMD_ADT_l:=PM_ADT_al{$InnerLoop_l}[Pontis_Metric_Data]PMD_CIX_Bear_r:=PM_CIX_Bear_ar{$InnerLoop_l}[Pontis_Metric_Data]PMD_CIX_Deck_r:=PM_CIX_Deck_ar{$InnerLoop_l}[Pontis_Metric_Data]PMD_CIX_Joint_r:=PM_CIX_Joint_ar{$InnerLoop_l}[Pontis_Metric_Data]PMD_CIX_Sub_r:=PM_CIX_Sub_ar{$InnerLoop_l}[Pontis_Metric_Data]PMD_CIX_Supr_r:=PM_CIX_Supr_ar{$InnerLoop_l}[Pontis_Metric_Data]PMD_Hindex_r:=PM_Hindex_ar{$InnerLoop_l}[Pontis_Metric_Data]PMD_PTIndex_r:=PM_PTIndex_ar{$InnerLoop_l}[Pontis_Metric_Data]PMD_YKey_l:=PM_YKey_al{$InnerLoop_l}SAVE RECORD([Pontis_Metric_Data])End if UNLOAD RECORD([Pontis_Metric_Data])End for End if End if SAVE RECORD([Pontis_Metrics])UNLOAD RECORD([Pontis_Metrics])End for End if SQL_ClearArrays ("sp_RTRV_PontisMetric")SQL_ClearArrays ("sp_RTRV_Metricdata")SQL_Disconnect $DocumentData_txt:="There were "+String($MetricUpdate_l)+"[Pontis_Metrics] records updated"+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)$DocumentData_txt:="There were "+String($MetricAdd_l)+"[Pontis_Metrics] records added"+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)$DocumentData_txt:="There were "+String($MetricDataUpdate_l)+"[Pontis_Metric_Data] records updated"+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)$DocumentData_txt:="There were "+String($MetricDataAdd_l)+"[Pontis_Metric_Data] records added"+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)$DocumentData_txt:="There were "+String($SizeOfArray_l)+" records retrieved from sp_RTRV_PontisMetric"+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)$DocumentData_txt:="There were "+String($TotalDataCount_l)+" records retrieved from sp_RTRV_Metricdata"+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)End if End if End if $DocumentData_txt:="Run end "+String(Current date;Internal date short )+" "+String(Current time(*);HH MM SS )+Char(Carriage return )+Char(Line feed )PM_ControlLogDocument ("A";->$FileName_txt;->$DocumentData_txt)End if ÊÊ`End PM_ControlMetricRetrieve