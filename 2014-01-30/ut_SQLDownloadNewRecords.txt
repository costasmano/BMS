  ` ----------------------------------------------------  ` User name (OS): Charles Miller  ` Date and time: 06/21/10, 12:13:09  ` ----------------------------------------------------  ` Method: ut_SQLDownloadNewRecords  ` Description  ` <caret/>  `  ` Parameters  ` ----------------------------------------------------   `$1 $Password  `$2 $viOnScreen  `$3 Check structure  ` Modified by: Charles Miller (6/21/10)If (False)Mods_OPNToSQLUpgrade   `4D Open to SQL conversion  `Modified by: Charles Miller (8/11/10 11:15:26)   `Ugrade to v11  `Modified by: Charles Miller (4/28/11 17:00:21)  `Modify how (Not(4DError_b)) and (Not(SQLError_b)) handled replace with (ut_fTestForSQLor4DError)  `Modified by: Charles Miller (11/4/11 11:14:53)  ` Modified by: Costas Manousakis-(Designer)-(12/4/13 11:34:25)Mods_2013_12   `  `added more tracking of the transfer  to be sent in the email at the endMods_2013_12   ` Add ability to skip add record errors for certain tables  `Modified by: Charles Miller (12/19/13 14:55:24)End if Compiler_FieldVariables ut_InitFieldArray COMPILER_forSQL Compiler_TransfLog SQLError_b:=False4D_Error_b:=FalseInWHKRUpdate_b:=FalseDataRefernceError_b:=FalseX_NumActLogToBeRecd_L:=0X_ActLogToBeRecdStart_L:=0X_ActLogToBeRecdEnd_L:=0X_ActLogLastRecd_L:=0X_StartRec_txt:=""X_EndRec_txt:=""X_RecdError_txt:=""C_DATE($Start_d;$End_d)C_TIME($Start_tm;$Finish_tm;$Elapsed_tm)$Start_d:=Current date(*)$Start_tm:=Current time(*)C_TEXT($CurrentUser_txt)C_LONGINT($InternalNumber_l)$CurrentUser_txt:=Current userIf ((◊LockUserTx=True) & (◊TxUserName#$CurrentUser_txt))If (Application type#4D Server )ALERT("Sorry! You are not authorized to send or receive any data!")End if Else C_LONGINT($viOnScreen;$Error_l)$viOnScreen:=3C_STRING(80;$Password;vsPassword;vUserName)$Password:=""If (Count parameters>0)C_STRING(80;$1)$Password:=$1If (Count parameters>1)C_INTEGER($2)$viOnScreen:=$2End if End if C_BOOLEAN(vbOnScreenMessage;vbToFileMessage;$BackupRunning_b)vbOnScreenMessage:=(($viOnScreen=1) | ($viOnScreen=3))vbToFileMessage:=(($viOnScreen=2) | ($viOnScreen=3))C_LONGINT($Width;$Height)$Width:=600$Height:=300ut_FillIgnoreDupTableNames ut_StartMessage ($viOnScreen;"DownLoad Log";$Width;$Height;Regular window )ut_Message ("Download started at "+String($Start_d;Internal date short special )+" - "+String($Start_tm;HH MM SS )+◊sCR)C_BOOLEAN($DoDownLoad;$TransferOk)$Error_l:=ut_SQLMakeConnnection ($CurrentUser_txt;$Password;◊DestIP;$CurrentUser_txt+", you are about to download data from the central database.")$TransferOk:=FalseIf ($Error_l=1)$Error_l:=ut_TestServerStructureName End if If ($Error_l=1)$DoDownLoad:=($Error_l=1)C_LONGINT($vlActNRCs)SET QUERY DESTINATION(Into variable ;$vlActNRCs)  `load query in variableQUERY([Activity Log];[Activity Log]Activity Type="NRC";*)QUERY([Activity Log]; & ;[Activity Log]Status=0)SET QUERY DESTINATION(Into current selection )  `reset the query dest.C_TEXT($errMessage)If (($vlActNRCs>0) & ($DoDownLoad))$errMessage:="There are new records in the local database to be transfered!!"+◊sCR$errMessage:=$errMessage+"You MUST Execute Transfer first before a Data Download!!"If (vbToFileMessage)ut_Message ($errMessage)ut_CloseMessage End if If (vbOnScreenMessage)ut_MessageDia ($errMessage;"Transfer Messages";5;3)End if $DoDownLoad:=False  `disable the download....X_RecdError_txt:="There are new records in the local database to be transfered!!"End if If ($DoDownLoad)  `Apr-2003 changed from $DoDownLoad=TrueC_LONGINT($Lpid)$Lpid:=LProcessID ("$Logoff")  `Is there a logoff checkerIf ($Lpid>0)PAUSE PROCESS($Lpid)End if If (Not(SQLError_b))  `connection made  `Get the profile of the Owers of Data fileActFileID_l:=Table(->[Activity Log])OwnerFileID_l:=Table(->[Owners of Data])  `Get the profile of the Owers of Data fileOwnerRef_l:=Field(->[Owners of Data]RefID)OwnerName_l:=Field(->[Owners of Data]Owner Name)C_STRING(10;$vsDistServNo)$vsDistServNo:=f_IsDistrictServer If (ut_CheckForBackup )$InternalNumber_l:=-777End if Case of : ($InternalNumber_l=-777)ARRAY LONGINT(ActivityKeys_al;0): (◊Transfer=0)ut_SQLReturnALRecordKeys ($vsDistServNo;$CurrentUser_txt): (◊Transfer=1)ut_SQLReturnALRecordKeys ("ALL";$CurrentUser_txt)End case If (Size of array(ActivityKeys_al)=0)If ($InternalNumber_l=-777)ut_Message ("* * * * * * * * * * * "+◊sCR)ut_Message (◊sCR+"Download cancelled backup is running."+◊sCR)ut_Message ("* * * * * * * * * * * "+◊sCR)X_RecdError_txt:="Download cancelled backup is running."Else ut_Message ("* * * * * * * * * * * "+◊sCR)ut_Message (◊sCR+"All information downloaded previously!"+◊sCR)ut_Message ("* * * * * * * * * * * "+◊sCR)X_RecdError_txt:="All information downloaded previously!"End if Else X_StartRec_txt:=ut_CreateTimeStamp X_NumActLogToBeRecd_L:=Size of array(ActivityKeys_al)X_ActLogToBeRecdStart_L:=ActivityKeys_al{1}X_ActLogToBeRecdEnd_L:=ActivityKeys_al{X_NumActLogToBeRecd_L}C_TEXT($BindToVariable_txt;$SQL_Select_txt)$SQL_Select_txt:=ut_SetSelectForAllFields (Table(->[Activity Log]);->$BindToVariable_txt)C_BOOLEAN(DeletionOK_b)$SQL_Select_txt:=$SQL_Select_txt+" FROM [Activity Log] WHERE RefID = :vKey_l INTO "+$BindToVariable_txt+";"If (Not(SQLError_b))SORT ARRAY(ActivityKeys_al;>)  `do oldest firstC_LONGINT($Loop_l;$InternalNumber_l;$Interval)  `OK let's build the [Activity Log] selectut_Message ("Downloading "+String(Size of array(ActivityKeys_al))+" records…"+◊sCR)If (vbOnScreenMessage)◊ProgressPID:=StartProgress ("DownLoad";"Button";"Receiving Data From Server")$Interval:=MaxNum (MinNum (Int(Size of array(ActivityKeys_al)/40);20);2)  ` get an update interval between 2 and 20UpdateProgress (0;Size of array(ActivityKeys_al))  `start itEnd if For ($Loop_l;1;Size of array(ActivityKeys_al))If (ut_CheckForBackup )$InternalNumber_l:=-777X_RecdError_txt:=X_RecdError_txt+"Download cancelled backup is running. RefID # "+String($Loop_l)+" ID ="+String(ActivityKeys_al{$Loop_l})+Char(13)$Loop_l:=Size of array(ActivityKeys_al)+1Else DeletionOK_b:=TrueClear_FieldVariables (Table(->[Activity Log]))vKey_l:=ActivityKeys_al{$Loop_l}ut_SQLReturnRecord ($SQL_Select_txt;"[Activity Log]";String(vKey_l))If (Not(SQLError_b))ut_SQLExecuteNoReturn ("START")START TRANSACTIONCREATE RECORD([Activity Log])  `ut_SQLUpdateLocalTable (Table(->[Activity Log]))ut_NewSQLUpdateLocalTable (Table(->[Activity Log]))Inc_Sequence ("Activity Log";->[Activity Log]RefID)  `Get the next sequence[Activity Log]Destination:=""[Activity Log]Transfer:=0[Activity Log]Forward:=""[Activity Log]User Name:=$CurrentUser_txt[Activity Log]dDate:=Current date(*)[Activity Log]tTime:=Current time(*)[Activity Log]Source:=◊Destination[Activity Log]Status:=1[Activity Log]Dest ID local:=""[Activity Log]Dest ID parent:=""SAVE RECORD([Activity Log])Case of : ([Activity Log]Activity Type="FLD")  `Update a fieldut_Message ("Searching record to update…"+String([Activity Log]RefID)+◊sCR)ut_SQLUpdateLocalField   `XGetServerFld (;$ActFileID;$ActRefID;$OwnerFileID;$OwnerRef;$OwnerName): ([Activity Log]Activity Type="NRC")  `Create a new recordut_Message ("Creating new record…[Activity Log]RefID "+String([Activity Log]RefID)+◊sCR)ut_SQLCreateNewRecord   `XGetServerNRC ($ConnID;$ActFileID;$ActRefID;$OwnerFileID;$OwnerRef;$OwnerName): ([Activity Log]Activity Type="DRC")  `Delete a recordut_Message ("Deleting record…[Activity Log]RefID "+String([Activity Log]RefID)+◊sCR)ut_SQLDeleteLocalRecord   `XGetServerDRC ($ConnID;$ActFileID;$ActRefID;$OwnerFileID;$OwnerRef;$OwnerName): ([Activity Log]Activity Type="GRP")  `Do a Group transfer for a recordut_Message ("Searching record to group update…[Activity Log]RefID "+String([Activity Log]RefID)+◊sCR)ut_SQLUpdateLocalFields   `XGetServerGrp ($ConnID;$ActFileID;$ActRefID;$OwnerFileID;$OwnerRef;$OwnerName): ([Activity Log]Activity Type="GRD")  `Do a Group deletion of recordsut_Message ("Searching records to group delete…[Activity Log]RefID "+String([Activity Log]RefID)+◊sCR)ut_SQLDeleteLocalRecords   `XGetServerGRD ($ConnID;$ActFileID;$ActRefID;$OwnerFileID;$OwnerRef;$OwnerName)  `2004-07-28 ASL Handles Links between records.: ([Activity Log]Activity Type="LNK")  `Update a link to a recordut_Message ("Updating a link to a local record…[Activity Log]RefID "+String([Activity Log]RefID)+◊sCR)ut_SQLServerLink   `XGetServerLnk ($ConnID;$ActFileID;$ActRefID;$OwnerFileID;$OwnerRef;$OwnerName)End case ut_SQLCreateOwnerRecords SAVE RECORD([Activity Log])UNLOAD RECORD([Activity Log])Else X_RecdError_txt:=X_RecdError_txt+"SQL Error ! RefID # "+String($Loop_l)+" ID ="+String(ActivityKeys_al{$Loop_l})+Char(13)$Loop_l:=Size of array(ActivityKeys_al)+1End if FLUSH BUFFERS  `Save status info immediately!If ((ut_fTestForSQLor4DError ) & (DeletionOK_b)) & (Not(DataRefernceError_b))ut_SQLExecuteNoReturn ("COMMIT")If (Not(SQLError_b))VALIDATE TRANSACTIONX_ActLogLastRecd_L:=ActivityKeys_al{$Loop_l}If (vbOnScreenMessage)If (($Loop_l%$Interval=0) | ($Loop_l=Size of array(ActivityKeys_al)))  `Don't slow down things just to displayUpdateProgress ($Loop_l;Size of array(ActivityKeys_al))End if End if Else CANCEL TRANSACTION$InternalNumber_l:=-888X_RecdError_txt:=X_RecdError_txt+"SQL or 4D Error ! RefID # "+String($Loop_l)+" ID ="+String(ActivityKeys_al{$Loop_l})+" internal error -888"+Char(13)$Loop_l:=Size of array(ActivityKeys_al)+1End if Else If (DataRefernceError_b)ut_SQLExecuteNoReturn ("COMMIT")Else ut_SQLExecuteNoReturn ("ROLLBACK")End if CANCEL TRANSACTIONDataRefernceError_b:=FalseCase of : (SQLError_b)$InternalNumber_l:=-888X_RecdError_txt:=X_RecdError_txt+"SQL Error ! RefID # "+String($Loop_l)+" ID ="+String(ActivityKeys_al{$Loop_l})+" internal error -888"+Char(13)$Loop_l:=Size of array(ActivityKeys_al)+1: (4DError_b)X_RecdError_txt:=X_RecdError_txt+"4D Error ! RefID # "+String($Loop_l)+" ID ="+String(ActivityKeys_al{$Loop_l})+" internal error -666"+Char(13)$InternalNumber_l:=-666$Loop_l:=Size of array(ActivityKeys_al)+1End case End if End if If (◊vCancel) | (◊Abort)$Loop_l:=Size of array(ActivityKeys_al)+1End if End for If (vbOnScreenMessage)CALL PROCESS(◊ProgressPID)End if Case of : ($InternalNumber_l=-888)ut_Message ("* * * * * * * * * * * "+◊sCR)ut_Message (◊sCR+"All information downloaded previously!"+◊sCR)ut_Message ("* * * * * * * * * * * "+◊sCR)X_RecdError_txt:=X_RecdError_txt+"All information downloaded previously! Error -888"+Char(13): ($InternalNumber_l=-777)PLAY("ConAbort")ut_Message ("* * * * * * * * * * * "+◊sCR)ut_Message ("Data transfer cancelled. Backup running..."+◊sCR)ut_Message ("* * * * * * * * * * * "+◊sCR)X_RecdError_txt:=X_RecdError_txt+"Data transfer cancelled. Backup running.. Error -777"+Char(13): (SQLError_b)PLAY("ConAbort")ut_Message ("* * * * * * * * * * * "+◊sCR)ut_Message ("Data transfer failed due to SQL error…["+String($InternalNumber_l)+"]"+◊sCR)ut_Message ("* * * * * * * * * * * "+◊sCR)X_RecdError_txt:=X_RecdError_txt+"Data transfer failed due to SQL error…["+String($InternalNumber_l)+"]"+Char(13)ALERT("Notify Costas as a SQL Error has occurred during transfer"): (4DError_b)PLAY("ConAbort")ut_Message ("* * * * * * * * * * * "+◊sCR)ut_Message ("Data transfer failed due to 4D error…["+String($InternalNumber_l)+"]"+◊sCR)ut_Message ("* * * * * * * * * * * "+◊sCR)X_RecdError_txt:=X_RecdError_txt+"Data transfer failed due to 4D error…["+String($InternalNumber_l)+"]"+Char(13)ALERT("Notify Costas as a 4D Error has occurred during transfer"): (◊vCancel) | (◊Abort)PLAY("ConAbort")ut_Message ("* * * * * * * * * * * "+◊sCR)ut_Message ("Data transfer cancelled…["+String($InternalNumber_l)+"]"+◊sCR)ut_Message ("* * * * * * * * * * * "+◊sCR)X_RecdError_txt:=X_RecdError_txt+"Data transfer cancelled…["+String($InternalNumber_l)+"]"+Char(13): ($InternalNumber_l=0)ut_Message ("* * * * * * * * * * * "+◊sCR)ut_Message ("All data transfered…No errors occurred"+◊sCR)ut_Message ("* * * * * * * * * * * "+◊sCR)End case End if X_EndRec_txt:=ut_CreateTimeStamp End if End if $End_d:=Current date(*)$Finish_tm:=Current time(*)$Elapsed_tm:=fElapsedTime ($Start_d;$Start_tm;$End_d;$Finish_tm)C_TEXT($msg)$msg:="Download ended at "+String($End_d;Internal date short special )+" - "+String($Finish_tm;HH MM SS )+◊sCR$msg:=$msg+"Download Time Elapsed : "+String($Elapsed_tm;Hour Min Sec )+◊sCRIf (Type(vDUplStartDate)=Is Date )  `start of upload has been definedIf (vDUplStartDate#!00/00/00!)  `and initializedIf (vDUplFinishDate#!00/00/00!)  `end of upload has been calculated also          $Elapsed_tm:=fElapsedTime (vDUplStartDate;vTUplStartTime;vDUplFinishDate;vTUplFinishTime)$msg:=$msg+"Upload Transfer Time Elapsed : "+String($Elapsed_tm;Hour Min Sec )+◊sCREnd if $Elapsed_tm:=fElapsedTime (vDUplStartDate;vTUplStartTime;$End_d;$Finish_tm)$msg:=$msg+"Total Transfer Time Elapsed : "+String($Elapsed_tm;Hour Min Sec )+◊sCREnd if End if If (vbToFileMessage)ut_Message ($msg)End if If (vbOnScreenMessage)ut_MessageDia ($msg;"Transfer Messages";5;2)End if End if If ($Lpid>0)  `Restore logoff checker◊fUsrPresent:=True  `Set as if the user has been hereRESUME PROCESS($Lpid)End if G_CloseAllTables   `close all tables...      ut_CloseMessage ut_SQLLogout Else Case of : ($Error_l=-2)ALERT("Tranfer cancelled due to invalid password"): ($Error_l=-4)ALERT("Tranfer cancelled due to Password entry screen cancelled"): ($Error_l=-9)ALERT("You are trying to transfer to "+SeverStructureName_txt+" but should be transfering to "+◊Destination)End case PLAY("Goodbye")End if End if 