  `Method: ut_SynchFromProd  `Description  `  ` Sync tables from production server to current db for the Preservation module  `  ` Uses db parameters PresProdIP and PresTablesToSynch  ` Parameters  ` ----------------------------------------------------If (False)  `----------------------------------------------------  `User name (OS): Charles Miller  `Date and time: 05/28/13, 10:52:39  `----------------------------------------------------  `Mods_2013_05  `r003 `   `Modified by: Charles Miller (5/28/13 10:52:45)  ` Modified by: Costas Manousakis-(Designer)-(7/29/13 21:41:24)Mods_2013_07   `  `added output of errors.  `  `re set the error after each table  `  `do not Save record right after creating a new one before doing the update of fields  ` Modified by: Costas Manousakis-(Designer)-(7/31/13 14:14:49)Mods_2013_07   `  `Renamed method to ut_SynchFromProd from ut_SynchFromProdForPreservationEnd if C_TEXT($IPAddress_txt;$Targetfolder_txt;$Temp_txt)$IPAddress_txt:=ut_GetSysParameter ("PresProdIP";"146.243.135.242:19812")$Temp_txt:=ut_GetSysParameter ("PresTablesToSynch")ARRAY TEXT($Tables_atxt;0)C_LONGINT($Loop_L;$HighestTableNumber_L)ut_TextToArray ($Temp_txt;->$Tables_atxt;Char(Carriage return ))C_TEXT($Timestamp_txt)If (Size of array($Tables_atxt)>0)$Targetfolder_txt:=ut_ReturnUserDocFolder ("PreservationSynch")$HighestTableNumber_L:=Get last table number$Timestamp_txt:=ut_ReturnTimeStampFromDate (Current date(*);Current time(*))$Targetfolder_txt:=$Targetfolder_txt+"PreservationSynch_"+$Timestamp_txt+".txt"ARRAY TEXT($TableNames_atxt;0)ARRAY LONGINT($TableNumber_al;0)ARRAY TEXT($TableNames_atxt;$HighestTableNumber_L)ARRAY LONGINT($TableNumber_al;$HighestTableNumber_L)C_TIME($doc_tm)$doc_tm:=Create document($Targetfolder_txt)SEND PACKET($doc_tm;"Beginning Preservation Synch process at "+$Timestamp_txt+Char(Carriage return ))CLOSE DOCUMENT($doc_tm)C_LONGINT(Count_l)C_TEXT(SQLCount_txt;SQL_txt)For ($Loop_L;1;$HighestTableNumber_L)If (Is table number valid($Loop_L))$TableNames_atxt{$Loop_L}:=Table name($Loop_L)$TableNumber_al{$Loop_L}:=$Loop_LEnd if End for C_POINTER($Table_ptr;$Fld_pointer;$Variable_ptr)C_LONGINT($FindPosition_L;$UniqueFldNumber_l;$InnerLoop_l;$TableNumber_L)C_TEXT($TableName_txt;$Variable_txt;$SelectFields_txt;$UpdateFields_txt)COMPILER_forSQL vbOnScreenMessage:=FalsevbToFileMessage:=Falseut_SQLConnect ("Designer";"caesar";$IPAddress_txt)ut_InitFieldArray For ($Loop_L;1;Size of array($Tables_atxt))$doc_tm:=Append document($Targetfolder_txt)SEND PACKET($doc_tm;"Looking for table name "+$Tables_atxt{$Loop_L}+Char(Carriage return ))CLOSE DOCUMENT($doc_tm)$FindPosition_L:=Find in array($TableNames_atxt;$Tables_atxt{$Loop_L})If ($FindPosition_L>0)ARRAY POINTER(KeysToReset_aptr;0)$TableNumber_L:=$TableNumber_al{$FindPosition_L}$Table_ptr:=Table($TableNumber_L)$TableName_txt:=Table name($TableNumber_l)SQLCount_txt:="SELECT Count(*) FROM ["+$TableName_txt+"] INTO :Count_l"Compiler_FieldVariables ($TableNumber_l)Clear_FieldVariables ($TableNumber_l)ut_ReturnKeyFldandVariable ($TableNumber_l;->$UniqueFldNumber_l;->$Variable_txt;True)$Timestamp_txt:=ut_ReturnTimeStampFromDate (Current date(*);Current time(*))If ($UniqueFldNumber_l=0)TRUNCATE TABLE($Table_ptr->)$doc_tm:=Append document($Targetfolder_txt)SEND PACKET($doc_tm;"Truncating table name "+$Tables_atxt{$Loop_L}+" at "+$Timestamp_txt+Char(Carriage return ))CLOSE DOCUMENT($doc_tm)Else $Fld_pointer:=Field($TableNumber_l;$UniqueFldNumber_l)$Variable_ptr:=Get pointer($Variable_txt)$doc_tm:=Append document($Targetfolder_txt)SEND PACKET($doc_tm;"Updating table name "+$Tables_atxt{$Loop_L}+" at "+$Timestamp_txt+Char(Carriage return ))CLOSE DOCUMENT($doc_tm)End if Begin SQLEXECUTE IMMEDIATE :SQLCount_txt;End SQLSQL_SetSelectInto ($TableNumber_l;->$SelectFields_txt;->$UpdateFields_txt)Offset_l:=1SQL_txt:="SELECT "+$SelectFields_txt+" FROM ["+$TableName_txt+"] LIMIT 1 OFFSET :Offset_l INTO "+$UpdateFields_txtRepeat Compiler_FieldVariables ($TableNumber_l)Clear_FieldVariables ($TableNumber_l)ON ERR CALL("SQL_Error")Begin SQLEXECUTE IMMEDIATE :SQL_txt;End SQLIf (Not(4DError_b)) & (Not(SQLError_b))ON ERR CALL("4D_Errors")If ($UniqueFldNumber_l=0)REDUCE SELECTION($Table_ptr->;0)Else QUERY($Table_ptr->;$Fld_pointer->=$Variable_ptr->)End if If (Records in selection($Table_ptr->)=1)If (ut_LoadRecord ($Table_ptr;1000))End if Else CREATE RECORD($Table_ptr->)  `SAVE RECORD($Table_ptr->)End if ut_NewSQLUpdateLocalTable ($TableNumber_l)SAVE RECORD($Table_ptr->)UNLOAD RECORD($Table_ptr->)Offset_l:=Offset_l+1End if Until (Offset_l=Count_l) | (4DError_b) | (SQLError_b)$doc_tm:=Append document($Targetfolder_txt)$Timestamp_txt:=ut_ReturnTimeStampFromDate (Current date(*);Current time(*))SEND PACKET($doc_tm;"Completed process for  table name "+$Tables_atxt{$Loop_L}+" at "+$Timestamp_txt+Char(Carriage return ))SEND PACKET($doc_tm;"  Records retrieved "+String(Offset_l)+"  - source count "+String(Count_l)+" 4D Error "+f_Boolean2String (4DError_b;"YN")+" SQL Error "+f_Boolean2String (SQLError_b;"YN")+Char(Carriage return ))If (SQLError_b | 4DError_b)C_LONGINT($loop2_L)For ($loop2_L;1;Size of array(SQL_InternalDescriptions_atxt))SEND PACKET($doc_tm;"   "+String(SQLErrorNumbers_al{$loop2_L})+"  -  "+SQL_InternalCodes_atxt{$loop2_L}+"  -  "+SQL_InternalDescriptions_atxt{$loop2_L}+Char(Carriage return ))End for SEND PACKET($doc_tm;Char(Carriage return )+"SQL statement:"+Char(Carriage return ))SEND PACKET($doc_tm;SQL_txt+Char(Carriage return ))If ($UniqueFldNumber_l=0)SEND PACKET($doc_tm;"No Unique field"+Char(Carriage return ))Else SEND PACKET($doc_tm;"Unique field "+Field name($Fld_pointer->)+" ; Var ;"+$Variable_txt+Char(Carriage return ))End if SEND PACKET($doc_tm;Char(Carriage return ))End if CLOSE DOCUMENT($doc_tm)For ($InnerLoop_l;1;Size of array(KeysToReset_aptr))SET INDEX(KeysToReset_aptr{$InnerLoop_l}->;0)End for End if   `Reset Errors for the next tableSQLError_b:=False4DError_b:=FalseEnd for $doc_tm:=Append document($Targetfolder_txt)$Timestamp_txt:=ut_ReturnTimeStampFromDate (Current date(*);Current time(*))SEND PACKET($doc_tm;"Completed Synch process at "+$Timestamp_txt+Char(Carriage return ))CLOSE DOCUMENT($doc_tm)ut_SQLLogout End if   `End ut_SynchFromProdForPreservation