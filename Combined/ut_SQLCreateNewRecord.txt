  ` ----------------------------------------------------  ` User name (OS): Charles Miller  ` Date and time: 07/08/10, 11:28:33  ` ----------------------------------------------------  ` Method: ut_SQLCreateNewRecord  ` Description  ` <caret/>  `ut_SQLCreateNewRecord  ` Parameters  ` ----------------------------------------------------  ` Modified by: Charles Miller (7/8/10)If (False)Mods_OPNToSQLUpgrade   `4D Open to SQL conversion  `Modified by: Charles Miller (8/11/10 11:17:31) Mods_2012_02   `r001 Add copde to set SaveActivityLogRecord_b to true at start  `Modified by: Charles Miller (2/7/12 12:47:07)Mods_2013_01   `r001 ` Change way ut_ReturnKeyFldandVariable is called by adding reindex boolean as 5th parameter  `It should only be passed as true if re-index will occur later using KeysToReset_aptr array  `Modified by: Charles Miller (2/5/13 13:55:58)Mods_2013_12   ` Add ability to skip add record errors for certain tables  `Modified by: Charles Miller (12/19/13 14:23:30)End if C_STRING(80;$LocalID_s;$ParentID_s;$RefID_s)C_LONGINT($RefID_l)C_POINTER($LocalTable_ptr;$LocalFld_ptr;$idparent;$ParentTable_ptr;$ParentField_ptr)$LocalTable_ptr:=Table([Activity Log]FileID Local)$LocalFld_ptr:=Field([Activity Log]FileID Local;[Activity Log]FieldID Local)C_LONGINT($NewRef_l;$UniqueFldNumber_l;$Count_l;$Type_l;$Length_l)C_BOOLEAN($Indexed_b;$Unique_b;$Invisible_b)C_TEXT($SequenceName_txt;$Variable_txt)C_STRING(80;$Parentid_s;$Localid_s)SaveActivityLogRecord_b:=TrueCase of : ([Activity Log]RefIDType=0)$RefID_s:=[Activity Log]Local ID$RefID_l:=Num($RefID_s)CREATE RECORD($LocalTable_ptr->)If ([Activity Log]Local Type=0)$LocalFld_ptr->:=$RefID_sElse $LocalFld_ptr->:=$RefID_lEnd if $Localid_s:=$RefID_s$Parentid_s:=[Activity Log]Parent ID: ([Activity Log]RefIDType=1)$idparent:=Field([Activity Log]FileID Local;[Activity Log]FieldID Parent)BLOB TO VARIABLE([Activity Log]Data;$SequenceName_txt)Inc_Sequence ($SequenceName_txt;->$NewRef_l)CREATE RECORD($LocalTable_ptr->)If ([Activity Log]Type Parent=0)$idparent->:=[Activity Log]Parent IDElse $idparent->:=Num([Activity Log]Parent ID)End if If ([Activity Log]Local Type=0)$LocalFld_ptr->:=String($NewRef_l)Else $LocalFld_ptr->:=$NewRef_lEnd if   `Add entries into the file address resolution tableG_StoreRecResolution ([Activity Log]FileID Local;String($NewRef_l);[Activity Log]Local ID;◊Destination)$Localid_s:=String($NewRef_l)$Parentid_s:=[Activity Log]Parent ID: ([Activity Log]RefIDType=2)ut_ReturnKeyFldandVariable ([Activity Log]FileID Parent;->$UniqueFldNumber_l;->$Variable_txt;False)$ParentTable_ptr:=Table([Activity Log]FileID Parent)$ParentField_ptr:=Field([Activity Log]FileID Parent;$UniqueFldNumber_l)$idparent:=Field([Activity Log]FileID Local;[Activity Log]FieldID Parent)BLOB TO VARIABLE([Activity Log]Data;$SequenceName_txt)Inc_Sequence ($SequenceName_txt;->$NewRef_l)$Parentid_s:=aDblLookUpDest ([Activity Log]FileID Parent;[Activity Log]Parent ID;"here";◊Destination)GET FIELD PROPERTIES([Activity Log]FileID Parent;$UniqueFldNumber_l;$Type_l;$Length_l;$Indexed_b;$Unique_b;$Invisible_b)SET QUERY DESTINATION(Into variable ;$Count_l)$Count_l:=-1Case of : ($Type_l=Is Integer ) | ($Type_l=Is LongInt ) | ($Type_l=Is Real )QUERY($ParentTable_ptr->;$ParentField_ptr->=Num($Parentid_s)): ($Type_l=Is Alpha Field ) | ($Type_l=Is Text )QUERY($ParentTable_ptr->;$ParentField_ptr->=$Parentid_s)Else End case SET QUERY DESTINATION(Into current selection )If ($Count_l=1)CREATE RECORD($LocalTable_ptr->)If ([Activity Log]Type Parent=0)$idparent->:=$Parentid_sElse $idparent->:=Num($Parentid_s)End if If ([Activity Log]Local Type=0)$LocalFld_ptr->:=String($NewRef_l)Else $LocalFld_ptr->:=$NewRef_lEnd if Else SaveActivityLogRecord_b:=FalseEnd if   `Add entries into the file address resolution tableG_StoreRecResolution ([Activity Log]FileID Local;String($NewRef_l);[Activity Log]Local ID;◊Destination)$Localid_s:=String($NewRef_l)$Parentid_s:=$Parentid_s: ([Activity Log]RefIDType=3)ut_ReturnKeyFldandVariable ([Activity Log]FileID Parent;->$UniqueFldNumber_l;->$Variable_txt;False)$ParentTable_ptr:=Table([Activity Log]FileID Parent)$ParentField_ptr:=Field([Activity Log]FileID Parent;$UniqueFldNumber_l)$Parentid_s:=aDblLookUpDest ([Activity Log]FileID Parent;[Activity Log]Parent ID;"Here";◊Destination)GET FIELD PROPERTIES([Activity Log]FileID Parent;$UniqueFldNumber_l;$Type_l;$Length_l;$Indexed_b;$Unique_b;$Invisible_b)SET QUERY DESTINATION(Into variable ;$Count_l)$Count_l:=-1Case of : ($Type_l=Is Integer ) | ($Type_l=Is LongInt ) | ($Type_l=Is Real )QUERY($ParentTable_ptr->;$ParentField_ptr->=Num($Parentid_s)): ($Type_l=Is Alpha Field ) | ($Type_l=Is Text )QUERY($ParentTable_ptr->;$ParentField_ptr->=$Parentid_s)Else End case SET QUERY DESTINATION(Into current selection )If ($Count_l=1)$idparent:=Field([Activity Log]FileID Local;[Activity Log]FieldID Parent)CREATE RECORD($LocalTable_ptr->)  `Danger!  `If (aparentid="")  `Assume local id and remote are the same!  ` aparentid:=ActParentID  `End if If ([Activity Log]Type Parent=0)$idparent->:=$Parentid_sElse $idparent->:=Num($Parentid_s)End if $Localid_s:=aDblLookUpDest ([Activity Log]File Number;[Activity Log]Local ID;"here";◊Destination)  `Danger!  `If (alocalid="")  `Assume local id and remote are the same!  ` alocalid:=[Activity Log]Local ID  `End if If ([Activity Log]Local Type=0)$LocalFld_ptr->:=$Localid_sElse $LocalFld_ptr->:=Num($Localid_s)End if $Localid_s:=$Localid_s$Parentid_s:=$Parentid_sElse SaveActivityLogRecord_b:=FalseEnd if : ([Activity Log]RefIDType=4)BLOB TO VARIABLE([Activity Log]Data;$SequenceName_txt)Inc_Sequence ($SequenceName_txt;->$NewRef_l)CREATE RECORD($LocalTable_ptr->)If ([Activity Log]Local Type=0)$LocalFld_ptr->:=String($NewRef_l)Else $LocalFld_ptr->:=$NewRef_lEnd if   `Put an entry into the file address resolution tableG_StoreRecResolution ([Activity Log]FileID Local;String($NewRef_l);[Activity Log]Local ID;◊Destination)$Localid_s:=String($NewRef_l)$Parentid_s:=""End case If (Not(4DError_b))If (SaveActivityLogRecord_b)SAVE RECORD($LocalTable_ptr->)If (4DError_b)C_TEXT($MyTableName_txt)$MyTableName_txt:=Table name($LocalTable_ptr)If (Find in array(IgnoreDuplicateKeyTables_atxt;$MyTableName_txt)>0)If (Find in array(SQLErrorNumbers_al;1195)>0)ut_Message ("New record skipped table duplicate key already found "+Table name($LocalTable_ptr)+" "+Field name($LocalFld_ptr)+" = "+$Localid_s+◊sCR)4DError_b:=FalseEnd if Else End if Else ut_Message ("New record created table "+Table name($LocalTable_ptr)+" "+Field name($LocalFld_ptr)+" = "+$Localid_s+◊sCR)End if UNLOAD RECORD($LocalTable_ptr->)  `reset in case something has changed[Activity Log]Local ID:=$Localid_s[Activity Log]Parent ID:=$Parentid_sSAVE RECORD([Activity Log])Else ut_Message ("New record Skipped as parent did not exist - table "+Table name($LocalTable_ptr)+" "+Field name($LocalFld_ptr)+" = "+$Localid_s+◊sCR)End if Else C_BOOLEAN($OriginalonScreen_b)$OriginalonScreen_b:=vbOnScreenMessagevbOnScreenMessage:=Falseut_SQLWriteErrorsToLog ("Act Log error in "+Current method name+"  -ID"+String([Activity Log]RefID)+◊sCR)vbOnScreenMessage:=$OriginalonScreen_bEnd if 