ÊÊ`----------------------------------------------------ÊÊ`User name (OS): Charles MillerÊÊ`Date and time: 03/28/11, 16:09:58ÊÊ`----------------------------------------------------ÊÊ`Method: Object Method: CloneTables.Button1ÊÊ`DescriptionÊÊ`ÊÊ` ParametersÊÊ` ----------------------------------------------------If (False)ÊÊ`Ugrade to v11ÊÊ`Modified by: Charles Miller (3/28/11 16:09:59)Mods_2013_01 ÊÊ`r001 `Change way ut_ReturnKeyFldandVariable is called by adding reindex boolean as 5th parameterÊÊ`It should only be passed as true if re-index will occur later using KeysToReset_aptr arrayÊÊ`Modified by: Charles Miller (2/5/13 11:23:39)Mods_2013_09 ÊÊ`r001 `  Changes in cloning to use arrays whenever possibleÊÊ`Modified by: Charles Miller (9/10/13 13:01:58)End if If (SQL_TEXT#"")Ê&Ê(KeyValue_txt="")ALERT("You may not use custom where with a blank KeyValue_txt")Else C_TIME($BegTime;$EndTime)$BegTime:=Current timeC_LONGINT($UniqueFldNumber_l)C_TEXT($Variable_txt)ARRAY TEXT($RetrivedTables_atxt;0)C_TEXT($TableName_txt;$SelectFields_txt;$UpdateFields_txt;SQL_txt;SQLCount_txt)C_LONGINT($Loop_l;$TableNumber_l;Offset_l;Count_l;$InnerLoop_l)C_BOOLEAN($QueryAndReplace_b)$QueryAndReplace_b:=False4DError_b:=FalseSQLError_b:=FalseC_BOOLEAN($Skip_b)ARRAY TEXT(clone_TablesWithUniqueKey_atxt;0)ARRAY POINTER(clone_UniqueKeys_aptr;0)ARRAY POINTER(clone_Array_aptr;0)ARRAY POINTER(clone_Table_aPtr;0)ARRAY BOOLEAN($HasPictureOrBlob_ab;0)C_BOOLEAN($HasPictureOrBlob_b)For ($TableNumber_l;1;Get last table number)$HasPictureOrBlob_b:=clone_ReturnUniqueKeys ($TableNumber_l;->$UniqueFldNumber_l;->$Variable_txt;True)If ($UniqueFldNumber_l>0)APPEND TO ARRAY(clone_Table_aPtr;Table($TableNumber_l))APPEND TO ARRAY(clone_TablesWithUniqueKey_atxt;Table name($TableNumber_l))APPEND TO ARRAY(clone_UniqueKeys_aptr;Field($TableNumber_l;$UniqueFldNumber_l))APPEND TO ARRAY(clone_Array_aptr;Get pointer($Variable_txt))APPEND TO ARRAY($HasPictureOrBlob_ab;$HasPictureOrBlob_b)End if End for $UniqueFldNumber_l:=0C_TIME($TableS_tm;$TableE_tm)For ($Loop_l;1;Size of array(ProcessTableNames_atxt))SET BLOB SIZE(BlobHoldUpdates_blb;0)$TableS_tm:=Current time$Skip_b:=False$TableNumber_l:=ProcessTableNumber_al{$Loop_l}C_TEXT($Variable_txt)$TableName_txt:=Table name($TableNumber_l)ut_ReturnKeyFldandVariable ($TableNumber_l;->$UniqueFldNumber_l;->$Variable_txt;True)SQL_TEXT:=RemoteCustomQuery_atxt{$Loop_l}C_TEXT($FieldName_txt;SQLKeyValue_txt)C_LONGINT($Row_l)C_POINTER($Field_ptr)Case of : (SQL_TEXT#"")SQLCount_txt:="SELECT Count(*) FROM ["+$TableName_txt+"] "+Char(Carriage return )SQLCount_txt:=SQLCount_txt+SQL_TEXT$QueryAndReplace_b:=TruerbUpdate_l:=1: (RemoteQueryType_as{$Loop_l}#"")Ê&Ê(RemoteKey_atxt{$Loop_l}#"")SQLKeyValue_txt:=RemoteKey_atxt{$Loop_l}SQLCount_txt:="SELECT Count(*) FROM ["+$TableName_txt+"] "+Char(Carriage return )SQLCount_txt:=SQLCount_txt+" Where "+"["+Table name($TableNumber_l)+"].["+RemoteKeyName_atxt{$Loop_l}+"] "+Char(Carriage return )C_TEXT($RemoteQueryType_txt)$RemoteQueryType_txt:=RemoteQueryType_as{$Loop_l}Case of : (RemoteQueryType_as{$Row_l}="Begins with")SQLKeyValue_txt:=SQLKeyValue_txt+"%"$RemoteQueryType_txt:=" LIKE ": (RemoteQueryType_as{$Row_l}="Ends with")SQLKeyValue_txt:="%"+SQLKeyValue_txt$RemoteQueryType_txt:=" LIKE ": (RemoteQueryType_as{$Row_l}="Contains")SQLKeyValue_txt:="%"+SQLKeyValue_txt+"%"$RemoteQueryType_txt:=" LIKE "End case SQLCount_txt:=SQLCount_txt+$RemoteQueryType_txt+" :SQLKeyValue_txt INTO :Count_l;"rbUpdate_l:=1C_LONGINT($FieldNumber_L)$FieldNumber_L:=Clone_ReturnFieldNumber ($TableNumber_l;RemoteKeyName_atxt{$Loop_l})$Field_ptr:=Field($TableNumber_l;$FieldNumber_L)$QueryAndReplace_b:=TrueElse SQLCount_txt:="SELECT Count(*) FROM ["+$TableName_txt+"] INTO :Count_l;"End case Compiler_FieldVariables ($TableNumber_l)Clear_FieldVariables ($TableNumber_l)Begin SQLEXECUTE IMMEDIATE :SQLCount_txt;End SQLC_POINTER($Variable_ptr;$Table_ptr)C_LONGINT($FindInTableNames_L)$FindInTableNames_L:=Find in array(clone_TablesWithUniqueKey_atxt;Table name($TableNumber_l))$Table_ptr:=Table($TableNumber_l)$Skip_b:=FalseIf ($FindInTableNames_L>0)$HasPictureOrBlob_b:=$HasPictureOrBlob_ab{$FindInTableNames_L}End if If (rbUpdate_l=1)If ($QueryAndReplace_b)Ê`&Ê($HasPictureOrBlob_b=False)If ($FindInTableNames_L<1)If (Read only state($Table_ptr->)=True)UNLOAD RECORD($Table_ptr->)READ WRITE($Table_ptr->)End if REDUCE SELECTION($Table_ptr->;0)SET QUERY DESTINATION(Into set ;"ToBeDeletedSet")Case of : (RemoteQueryType_as{$Loop_l}="=")QUERY($Table_ptr->;$Field_ptr->=KeyValue_txt): (RemoteQueryType_as{$Loop_l}=">")QUERY($Table_ptr->;$Field_ptr->>KeyValue_txt): (RemoteQueryType_as{$Loop_l}="<")QUERY($Table_ptr->;$Field_ptr-><KeyValue_txt): (RemoteQueryType_as{$Loop_l}=">=")QUERY($Table_ptr->;$Field_ptr->>=KeyValue_txt): (RemoteQueryType_as{$Loop_l}="<=")QUERY($Table_ptr->;$Field_ptr-><=KeyValue_txt): (RemoteQueryType_as{$Loop_l}="NOT =")QUERY($Table_ptr->;$Field_ptr->#KeyValue_txt): (RemoteQueryType_as{$Row_l}="Begins with")QUERY($Table_ptr->;$Field_ptr->=KeyValue_txt+"@"): (RemoteQueryType_as{$Row_l}="Ends with")QUERY($Table_ptr->;$Field_ptr->="@"+KeyValue_txt): (RemoteQueryType_as{$Row_l}="Contains")QUERY($Table_ptr->;$Field_ptr->="@"+KeyValue_txt+"@")End case SET QUERY DESTINATION(Into current selection )If (Records in set("ToBeDeletedSet")>0)USE SET("ToBeDeletedSet")Repeat If (Records in selection($Table_ptr->)=1)DELETE RECORD($Table_ptr->)Else DELETE SELECTION($Table_ptr->)End if If (Records in set("LockedSet")>0)USE SET("LockedSet")End if Until (Records in set("LockedSet")=0)End if CLEAR SET("ToBeDeletedSet")End if Else If ($UniqueFldNumber_l=0)CONFIRM("No primary key for the selected table "+Table name($TableNumber_l);"Proceed";"Do not proceed")If (OK=1)$Skip_b:=FalserbUpdate_l:=0rbReplace_l:=1Else $Skip_b:=TrueEnd if Else $Skip_b:=FalseEnd if Repeat ON ERR CALL("4D_Errors")READ WRITE($Table_ptr->)TRUNCATE TABLE($Table_ptr->)If (OK=1)Else CONFIRM("Not all records deleted. ";"try again";"skip")If (OK=1)$Skip_b:=TrueElse DELAY PROCESS(Current process;120)End if End if Until (OK=1)Ê|Ê($Skip_b)End if Else Repeat ON ERR CALL("4D_Errors")READ WRITE($Table_ptr->)TRUNCATE TABLE($Table_ptr->)If (OK=1)Else CONFIRM("Not all records deleted. ";"try again";"skip")If (OK=1)$Skip_b:=TrueElse DELAY PROCESS(Current process;120)End if End if Until (OK=1)Ê|Ê($Skip_b)End if If (Not(4DError_b))Ê&Ê(Not(SQLError_b))Ê&Ê(Not($Skip_b))C_BOOLEAN($UseArrays_b)ÊÊ`ÊÊ`If ($HasPictureOrBlob_b=True)ÊÊ`$UseArrays_b:=FalseÊÊ`Else ÊÊ`$UseArrays_b:=($QueryAndReplace_b)Ê|Ê(rbUpdate_l=0)ÊÊ`End if $UseArrays_b:=($QueryAndReplace_b)Ê|Ê(rbUpdate_l=0)ut_CloneSetUpSelectInto ($TableNumber_l;->$SelectFields_txt;->$UpdateFields_txt;$UseArrays_b)ÊÊ`SQL_SetSelectInto ($TableNumber_l;->$SelectFields_txt;->$UpdateFields_txt)$UpdateFields_txt:=$UpdateFields_txt+";"If ($UseArrays_b)Offset_l:=0Else Offset_l:=1End if Case of : (RemoteQueryType_as{$Loop_l}#"")Ê&Ê(RemoteKey_atxt{$Loop_l}#"")ÊÊ`&Ê($UniqueFldNumber_l#0)SQL_txt:="SELECT "+$SelectFields_txt+" FROM ["+$TableName_txt+"] "+Char(Carriage return )SQL_txt:=SQL_txt+" Where ["+RemoteKeyName_atxt{$Loop_l}+"] "+$RemoteQueryType_txt+" :SQLKeyValue_txt "+Char(Carriage return )SQL_txt:=SQL_txt+"LIMIT :SQL_Limit_L OFFSET :Offset_l "+Char(Carriage return )+" INTO "+$UpdateFields_txt+Char(Carriage return )Offset_l:=0: (SQL_TEXT#"")SQL_txt:="SELECT "+$SelectFields_txt+" FROM ["+$TableName_txt+"] LIMIT "+String(SQL_Limit_L)+" OFFSET :Offset_l "+Char(Carriage return )SQL_txt:=SQL_txt+SQL_TEXT+Char(Carriage return )SQL_txt:=SQL_txt+"INTO "+$UpdateFields_txtOffset_l:=0Else SQL_txt:="SELECT "+$SelectFields_txt+" FROM ["+$TableName_txt+"] LIMIT "+String(SQL_Limit_L)+"  OFFSET :Offset_l INTO "+$UpdateFields_txtEnd case C_LONGINT(×ProgressPID)C_TIME($beg;$end)If (Count_l>0)ON ERR CALL("4D_Errors")$beg:=Current timeC_REAL($Interval)$Interval:=MaxNum (MinNum (Int(Count_l/40);20);2)×ProgressPID:=StartProgress (Substring(ProcessTableNames_atxt{$Loop_l};1;23);"Button";"Retrieving Records")C_TEXT($Name_txt;$Name1_txt)C_LONGINT($State_L;$Time_L)PROCESS PROPERTIES(×ProgressPID;$Name_txt;$State_L;$Time_L)UpdateProgress (1;Count_l)Repeat If (Offset_l%$Interval)=0UpdateProgress (Offset_l;Count_l)End if Clear_FieldVariables ($TableNumber_l)ON ERR CALL("SQL_Error")Begin SQLEXECUTE IMMEDIATE :SQL_txt;End SQLIf (Not(4DError_b))Ê&Ê(Not(SQLError_b))ON ERR CALL("4D_Errors")If ($UseArrays_b)Case of : (rbUpdate_l=1)If (Find in array(clone_TablesWithUniqueKey_atxt;Table name($TableNumber_l))<1)REDUCE SELECTION($Table_ptr->;0)Clone_ArrayToSelection ($TableNumber_l)Else Clone_UpdateRecords ($TableName_txt)End if Else REDUCE SELECTION($Table_ptr->;0)Clone_ArrayToSelection ($TableNumber_l)End case Else If (rbUpdate_l=1)If (Not($QueryAndReplace_b))QUERY($Table_ptr->;$Field_ptr->=$Variable_ptr->)End if If (Records in selection($Table_ptr->)=1)If (ut_LoadRecord ($Table_ptr;1000))End if Else CREATE RECORD($Table_ptr->)SAVE RECORD($Table_ptr->)End if Else CREATE RECORD($Table_ptr->)SAVE RECORD($Table_ptr->)End if If (arbNew_l=1)ut_NewSQLUpdateLocalTable ($TableNumber_l)Else ut_SQLUpdateLocalTable ($TableNumber_l)End if SAVE RECORD($Table_ptr->)UNLOAD RECORD($Table_ptr->)Offset_l:=Offset_l+1End if End if Until (Offset_l=Count_l)Ê|Ê(4DError_b)Ê|Ê(SQLError_b)CALL PROCESS(×ProgressPID)C_LONGINT($State_L)Repeat IDLEPROCESS PROPERTIES(×ProgressPID;$Name1_txt;$State_L;$Time_L)DELAY PROCESS(Current process;60)Until ($State_L<1)Ê|Ê($Name_txt#$Name1_txt)If (BLOB size(BlobHoldUpdates_blb)>0)×ProgressPID:=StartProgress (Substring(ProcessTableNames_atxt{$Loop_l};1;23);"Button";"Retrieving Blobs")UpdateProgress (1;Count_l)ut_ProcessBlobs ($TableNumber_l)CALL PROCESS(×ProgressPID)PROCESS PROPERTIES(×ProgressPID;$Name_txt;$State_L;$Time_L)Repeat IDLEPROCESS PROPERTIES(×ProgressPID;$Name1_txt;$State_L;$Time_L)DELAY PROCESS(Current process;60)Until ($State_L<1)Ê|Ê($Name_txt#$Name1_txt)End if C_LONGINT($IndexLoop_l)For ($IndexLoop_l;1;Size of array(KeysToReset_aptr))SET INDEX(KeysToReset_aptr{$IndexLoop_l}->;KeyIndextType_aL{$IndexLoop_l};*)ÊÊ`reset index asycnhronouslyEnd for ARRAY POINTER(KeysToReset_aptr;0)ARRAY LONGINT(KeyIndextType_aL;0)$end:=Current timeCALL PROCESS(×ProgressPID)End if If (Not(4DError_b))Ê&Ê(Not(SQLError_b))Ê&Ê(Not($Skip_b))Else ALERT("There was an error processing "+ProcessTableNames_atxt{$Loop_l}+". No further processing will be done!")$Loop_l:=Size of array(ProcessTableNames_atxt)End if End if $TableE_tm:=Current timeC_TEXT($Append_txt)$Append_txt:="Processed "+String(Count_l)+" records for table "+$TableName_txt+" in Elapsed time of: "+String($TableE_tm-$TableS_tm)+Char(Carriage return )APPEND TO ARRAY($RetrivedTables_atxt;$Append_txt)End for End if $EndTime:=Current timeALERT("Elapsed time is "+String($EndTime-$BegTime))CONFIRM("Process Create retrieved table and record cound document";"Yes";"No")If (OK=1)C_TIME($Doc_tm)$Doc_tm:=Create document("")CLOSE DOCUMENT($Doc_tm)C_BLOB($Doocument_blb)SET BLOB SIZE($Doocument_blb;0)For ($Loop_L;1;Size of array($RetrivedTables_atxt))TEXT TO BLOB($RetrivedTables_atxt{$Loop_L};$Doocument_blb;Mac text without length ;*)End for TEXT TO BLOB("Total elapsed time was "+String($EndTime-$BegTime)+Char(Carriage return );$Doocument_blb;Mac text without length ;*)BLOB TO DOCUMENT(Document;$Doocument_blb)End if CONFIRM("Process another table";"Yes";"No")If (OK=1)Else CANCELEnd if ÊÊ`End Object Method: CloneTables.Button1