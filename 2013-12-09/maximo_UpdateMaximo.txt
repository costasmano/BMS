ÊÊ`Method: maximo_UpdateMaximoÊÊ`DescriptionÊÊ`ÊÊ` ParametersÊÊ` ----------------------------------------------------If (False)ÊÊ`----------------------------------------------------ÊÊ`User name (OS): Charles MillerÊÊ`Date and time: 10/01/13, 16:43:57ÊÊ`----------------------------------------------------Mods_2013_10 ÊÊ`r001 ` ÊÊ`Modified by: Charles Miller (10/1/13 16:43:58)ÊÊ` Modified by: Costas Manousakis-(Designer)-(11/14/13 11:56:19)Mods_2013_11 ÊÊ`ÊÊ`Removed "-" between BDEPT and BINÊÊ` Modified by: Costas Manousakis-(Designer)-(11/18/13 17:49:34)Mods_2013_11 ÊÊ`ÊÊ`added element no , cat,  cat desc to the  export of elementssafety ; added call to INIT_FIELDS_DESÊÊ` Modified by: Charles Miller-(Designer)-(11/19/13 17:35:34)Mods_2013_11 ÊÊ`ÊÊ`replaced BEGIN / End SQL updates with SQL Execute commands : the Update was not recognizing the table namesÊÊ` Modified by: Costas Manousakis-(11/22/13 Mods_2013_11 ÊÊ`ÊÊ`Added Check for location (Dx-BDEPTBIN) before sending the Inspection ; Added sending DISTRICT field to Elementssafety_4D ÊÊ` Modified by: Costas Manousakis-(Designer)-(12/6/13 13:04:03)Mods_2013_12 ÊÊ`ÊÊ`Added SQL CANCEL LOAD after very SQL EXECUTE. mad all SQL Execute  Update calls inline statements so that local variables can be used in the statememntEnd if READ ONLY(*)×MessageFileCycle_L:=3ÊÊ`set msg cycle to 3 for user interactive execution.INIT_FIELDS_DES InitProcessVar InitPers Startup_PL Characters vbOnScreenMessage:=TruevbToFileMessage:=TrueC_LONGINT($OnScreen_L)$OnScreen_L:=3ÊÊ`3= on screen msgs onlyC_DATE(vDUplStartDate;vDUplFinishDate)C_TIME(vTUplStartTime;vTUplFinishTime;$eTime)ut_SetMessageDir ("MaximoTransfers")ut_StartMessage ($OnScreen_L;"Maximo_Transfer";600;300;Regular window )QUERY([Parameters];[Parameters]ParamCode="max_ExclDistricts")ÊÊ`identify districts we are not updatingARRAY TEXT($ExclDistricts_atxt;0)ut_TextToArray ([Parameters]Description;->$ExclDistricts_atxt;",")QUERY([Parameters];[Parameters]ParamCode="max_ExclInspType")ÊÊ`identify inspection types we are not updatingARRAY TEXT($ExclInspectionTypes_atxt;0)ut_TextToArray ([Parameters]Description;->$ExclInspectionTypes_atxt;",")QUERY([Parameters];[Parameters]ParamCode="max_ExclBridgeCat8")ÊÊ`identify Bridge types we are not updatingARRAY TEXT($ExclBridgeCat_atxt;0)ut_TextToArray ([Parameters]Description;->$ExclBridgeCat_atxt;",")C_DATE($StartReview_d)QUERY([Parameters];[Parameters]ParamCode="max_DBIEStartDate")ÊÊ`set earliest date for updates$StartReview_d:=Date([Parameters]Description)C_LONGINT($INSPID_L;$FindPosition_L;$Size_L;$LastActivityREFID_L;$TableNumber_L;$RecordsInElementSafety_L;$RecordsInStdPhoto_L)C_TEXT($BIN_txt;$TeamLeader_txt)C_DATE($InspDate_d)C_TEXT($PFlag_txt)C_TEXT($sqlStmt_txt)C_BOOLEAN($OkToProceed_b;$NewMaximoInsection_b)Compiler_maximo ÊÊ`Connect to maximo$OkToProceed_b:=ut_LoadSQLConnectionInfo ("MAXCORA06")If (Not($OkToProceed_b))ut_CreateOrUpdateSQLConnectionD ("MAXCORA06")End if C_LONGINT($Loop_L;$ElementLoop_L;$StdPhotLoop_L)SQLError_b:=FalseON ERR CALL("SQL_ERROR")SQL LOGIN("ODBC:"+[SQL_Connections]SQL_OBDCName_s;[SQL_Connections]SQL_UserName_s;[SQL_Connections]SQL_Password_s)If (Not(SQLError_b))ARRAY LONGINT($MaximoOurInspectionIDS_aL;0)ÊÊ`Retreive list of all our inspection ids from maximoSQL EXECUTE("Select inspid from Inspections_4D";$MaximoOurInspectionIDS_aL)While (Not(SQL End selection))SQL LOAD RECORD(SQL All Records )End while SQL CANCEL LOADElse $OkToProceed_b:=FalseEnd if ON ERR CALL("")If (Not(SQLError_b))×vCancel:=FalsevDUplStartDate:=Current date(*)vTUplStartTime:=Current time(*)If (vbToFileMessage)ut_Message ("Maximo Upload started at "+String(vDUplStartDate;Internal date short special )+" - "+String(vTUplStartTime;HH MM SS )+×sCR)End if ÊÊ`Create set of [Inspections] that are ready to send or have been sent previously to maximoSET QUERY DESTINATION(Into current selection )If (False)QUERY([Inspections];[Inspections]UpdateMaximo_L>0;*)QUERY([Inspections];Ê&Ê;[Inspections]InspReviewed=BMS Approved )Else C_STRING(50;$myID_s)$myID_s:=Request("Enter inspection ID to send")QUERY([Inspections];[Inspections]InspID=Num($myID_s);*)Repeat $myID_s:=Request("Enter inspection ID to send")If (OK=1)QUERY([Inspections];Ê|Ê;[Inspections]InspID=Num($myID_s);*)End if Until (OK=0)QUERY([Inspections])End if C_LONGINT($NumberInspectionRecords_L;$Interval_L)$NumberInspectionRecords_L:=Records in selection([Inspections])$Loop_L:=1C_STRING(50;$TeamLeader_s;$BIN_s;$BINType_s;$Dist_s)If ($NumberInspectionRecords_L>0)If (vbOnScreenMessage)×ProgressPID:=StartProgress ("Maximo Upload";"Button";"Sending Data to Maximo")$Interval_L:=MaxNum (MinNum (Int($NumberInspectionRecords_L/40);20);2)ÊÊ` get an update interval between 2 and 20UpdateProgress (0;$NumberInspectionRecords_L)ÊÊ`start itEnd if Repeat GOTO SELECTED RECORD([Inspections];$Loop_L)ut_Message ("Inspection record "+String($Loop_L)+" of "+String($NumberInspectionRecords_L)+" - ID:"+String([Inspections]InspID)+×sCR)If (False)Begin SQL// Also no need to transfer if inspection has no Elements.....// and we should try to load the inspection after it passes the checks that it needs to be transferred// if this might run on server, the ut_loadrecord displays messages - will that screw up the server??????End SQLEnd if If (ut_LoadRecord (->[Inspections];5))QUERY([Bridge MHD NBIS];[Bridge MHD NBIS]BIN=[Inspections]BIN)SET QUERY DESTINATION(Into set ;"$ElementSafetySet")QUERY([ElementsSafety];[ElementsSafety]InspID=[Inspections]InspID)SET QUERY DESTINATION(Into current selection )$Dist_s:="D"+String(Num([Bridge MHD NBIS]Item2))$BIN_s:=$Dist_s+"-"+[Bridge MHD NBIS]BDEPT+[Bridge MHD NBIS]BINÊÊ`search maximo to make sure they have the BINARRAY LONGINT($MaximoBINs_aL;0)$sqlStmt_txt:="select count(*) from locations where location = '"+$BIN_s+"' ;"ON ERR CALL("SQL_ERROR")SQL EXECUTE($sqlStmt_txt;$MaximoBINs_aL)While (Not(SQL End selection))SQL LOAD RECORD(SQL All Records )End while SQL CANCEL LOADON ERR CALL("")Case of : (Find in array($ExclDistricts_atxt;[Bridge MHD NBIS]InspResp)>0)ut_Message ("excluded : district "+$ExclDistricts_atxt{Find in array($ExclDistricts_atxt;[Bridge MHD NBIS]InspResp)}+" is excluded"+×sCR): (Find in array($ExclBridgeCat_atxt;[Bridge MHD NBIS]Item8 BridgeCat)>0)ut_Message ("excluded : bridge cat "+$ExclBridgeCat_atxt{Find in array($ExclBridgeCat_atxt;[Bridge MHD NBIS]Item8 BridgeCat)}+" is excluded"+×sCR): (Find in array($ExclInspectionTypes_atxt;[Inspections]Insp Type)>0)ut_Message ("excluded : inspection type "+$ExclInspectionTypes_atxt{Find in array($ExclInspectionTypes_atxt;[Inspections]Insp Type)}+" is excluded"+×sCR): ([Inspections]InspDBIEApprDate<$StartReview_d)ut_Message ("excluded : [Inspections]InspDBIEApprDate "+String([Inspections]InspDBIEApprDate)+" is less than "+String($StartReview_d)+×sCR): (Records in set("$ElementSafetySet")=0)ut_Message ("excluded : no [ElementsSafety] records found "+×sCR): (SQLError_b)ut_Message ("SQL Error searching for Location in LOCATIONS table :  "+$BIN_s+×sCR): ($MaximoBINs_aL{1}#1)ut_Message ("Did Not Find Location in LOCATIONS table :  "+$BIN_s+×sCR)Else $BINType_s:=[Bridge MHD NBIS]Item8 BridgeCat$INSPID_L:=[Inspections]InspID$InspDate_d:=[Inspections]Insp DatePERS_GetInfo ([Inspections]TeamLeader;"LASTNAMEFI";->$TeamLeader_txt)$TeamLeader_txt:=Replace string($TeamLeader_txt;"'";"")$TeamLeader_s:=Substring($TeamLeader_txt;1;50)$FindPosition_L:=Find in array($MaximoOurInspectionIDS_aL;$INSPID_L)$PFlag_txt:="N"If ($FindPosition_L>0)$NewMaximoInsection_b:=FalseElse $NewMaximoInsection_b:=TrueON ERR CALL("SQL_ERROR")SQL EXECUTE("insert into inspections_4D ( inspid, BIN, BINTYPE, INSPDATE, TEAMLEADER) values ( :$INSPID_L, :$BIN_s, :$BINType_s, :$InspDate_d, :$TeamLeader_s) ; ")SQL CANCEL LOADON ERR CALL("")End if ARRAY LONGINT($ElementIDS_aL;0)ON ERR CALL("SQL_ERROR")SQL EXECUTE("Select ELMSAFETYID from ELEMENTSSAFETY_4D where INSPID = :$INSPID_L ; ";$ElementIDS_aL)While (Not(SQL End selection))SQL LOAD RECORD(SQL All Records )End while SQL CANCEL LOADON ERR CALL("")If (Not(SQLError_b))USE SET("$ElementSafetySet")$RecordsInElementSafety_L:=Records in selection([ElementsSafety])C_STRING(100;$ESDesc_s;$ElementCatDesc_s)C_STRING(50;$ESDef_s;$ESPrit_s;$ElementCatCode_s)C_TEXT($ESComm_txt)C_LONGINT($ElementSafetyID_L;$ElementDictPos_l;$ElementNo_L;$catIndx_L)C_BOOLEAN($UpdateRecord_b)$ElementLoop_L:=1If (Not(SQLError_b))Repeat GOTO SELECTED RECORD([ElementsSafety];$ElementLoop_L)ut_Message ("ElementsSafety records "+String($ElementLoop_L)+" of "+String($RecordsInElementSafety_L)+" - ID:"+String([ElementsSafety]ElmSafetyID)+×sCR)If (ut_LoadRecord (->[ElementsSafety];5))$UpdateRecord_b:=TrueCase of : ($NewMaximoInsection_b): ([ElementsSafety]ModTimeStamp_s#"")Ê&Ê([ElementsSafety]maximo_UpdateTimeStamp_s=""): ([ElementsSafety]ModTimeStamp_s<[ElementsSafety]maximo_UpdateTimeStamp_s)$UpdateRecord_b:=FalseEnd case If ($UpdateRecord_b)$ElementSafetyID_L:=[ElementsSafety]ElmSafetyID$ESPrit_s:=[ElementsSafety]Priority$ESDef_s:=[ElementsSafety]Deficiency$ElementNo_L:=[ElementsSafety]ElementNo$ElementDictPos_l:=Find in array(×ELMTDICT_ELNum_ai;[ElementsSafety]ElementNo)$ElementCatCode_s:=×ELMTDICT_Cat_as{$ElementDictPos_l}$catIndx_L:=Find in array(×ALLElmtCatCode_as;×ELMTDICT_Cat_as{$ElementDictPos_l})If ($catIndx_L>0)$ElementCatDesc_s:=×ALLElmtCatDesc_as{$catIndx_L}Else $ElementCatDesc_s:=×ELMTDICT_Cat_as{$ElementDictPos_l}End if $FindPosition_L:=Find in array($ElementIDS_aL;$ElementSafetyID_L)If (Length([ElementsSafety]Description)>0)$ESDesc_s:=[ElementsSafety]DescriptionElse $ESDesc_s:=×ELMTDICT_Txt_as{$ElementDictPos_l}End if $ESComm_txt:=Fn_GetTextBlob ([ElementsSafety]ElmComments)$PFlag_txt:="N"If ($FindPosition_L>0)DELETE FROM ARRAY($ElementIDS_aL;$FindPosition_L;1)ut_Message (".... Updating table ELEMENTSSAFETY_4D.."+Char(13))ON ERR CALL("SQL_ERROR")SQL EXECUTE("UPDATE ELEMENTSSAFETY_4D set  DESCRIPTION = :$ESDesc_s, COMMENTS=:$ESComm_txt, DEFICIENCY=:$ESDef_s, PRIORITY=:$ESPrit_s, CATEGORY=:$ElementCatCode_s, CATEGORYDESC=:$ElementCatDesc_s, ELEMENTNO=:$ElementNo_L, DISTRICT=:$Dist_s, PROCESSED=:$PFlag_txt  "+"where ELMSAFETYID= :$ElementSafetyID_L; ")SQL CANCEL LOADIf (False)Begin SQLUPDATE "ELEMENTSSAFETY_4D" set DESCRIPTION = :$ESDesc_s, COMMENTS = :$ESComm_txt,DEFICIENCY = :$ESDef_s,PRIORITY = :$ESPrit_s,CATEGORY = :$ElementCatCode_s,CATEGORYDESC = :$ElementCatDesc_s,ELEMENTNO = :$ElementNo_L,PROCESSED = :$PFlag_txtwhere ELMSAFETYID = :$ElementSafetyID_L;End SQLEnd if ON ERR CALL("")Else ut_Message (".... Inserting New In Table ELEMENTSSAFETY_4D.."+Char(13))ON ERR CALL("SQL_ERROR")SQL EXECUTE("insert into ELEMENTSSAFETY_4D ( DESCRIPTION, INSPID, COMMENTS, DEFICIENCY, PRIORITY, ELMSAFETYID, CATEGORY, CATEGORYDESC, ELEMENTNO, PROCESSED, DISTRICT ) values (:$ESDesc_s, :$INSPID_L, :$ESComm_txt, :$ESDef_s, :$ESPrit_s, :$ElementSafetyID_L, :$Elem"+"entCatCode_s, :$ElementCatDesc_s, :$ElementNo_L, :$PFlag_txt, :$Dist_s ); ")SQL CANCEL LOADON ERR CALL("")End if If (Not(SQLError_b))[ElementsSafety]maximo_UpdateTimeStamp_s:=Substring(ut_ReturnTimeStampFromDate (Current date(*);Current time(*));1;12)SAVE RECORD([ElementsSafety])UNLOAD RECORD([ElementsSafety])End if Else $FindPosition_L:=Find in array($ElementIDS_aL;[ElementsSafety]ElmSafetyID)DELETE FROM ARRAY($ElementIDS_aL;$FindPosition_L;1)End if Else ÊÊ` Locked record$FindPosition_L:=Find in array($ElementIDS_aL;[ElementsSafety]ElmSafetyID)If ($FindPosition_L>0)DELETE FROM ARRAY($ElementIDS_aL;$FindPosition_L;1)End if End if $ElementLoop_L:=$ElementLoop_L+1Until ($ElementLoop_L>$RecordsInElementSafety_L)Ê|Ê(SQLError_b)End if If (Not(SQLError_b))If (Size of array($ElementIDS_aL)>0)ÊÊ`there are elements in maximo that we do not have$PFlag_txt:="D"$ElementLoop_L:=1Repeat $ElementSafetyID_L:=$ElementIDS_aL{$ElementLoop_L}ut_Message (".... Marking deleted In Table ELEMENTSSAFETY_4D element ID "+String($ElementSafetyID_L)+Char(13))ON ERR CALL("SQL_ERROR")SQL EXECUTE("update ELEMENTSSAFETY_4D set PROCESSED = 'D' where ELMSAFETYID = :$ElementSafetyID_L ;")SQL CANCEL LOADON ERR CALL("")$ElementLoop_L:=$ElementLoop_L+1Until (($ElementLoop_L>Size of array($ElementIDS_aL))Ê|ÊSQLError_b)End if End if ARRAY LONGINT($StandardPhotoIDS_aL;0)ON ERR CALL("SQL_ERROR")ÊÊ`Get list of photo IDs on maximo dbSQL EXECUTE("Select STANDARDPHOTOID from STANDARDPHOTOS_4D where INSPID = :$INSPID_L ;";$StandardPhotoIDS_aL)While (Not(SQL End selection))SQL LOAD RECORD(SQL All Records )End while SQL CANCEL LOADON ERR CALL("")If (Not(SQLError_b))QUERY([Standard Photos];[Standard Photos]InspID=$INSPID_L)$RecordsInStdPhoto_L:=Records in selection([Standard Photos])C_STRING(100;$StdPhotoDesciption_s)C_BLOB($StdPhotoPicture_blb)C_LONGINT($StdPhotoID_L)$StdPhotLoop_L:=1If (Not(SQLError_b))Repeat GOTO SELECTED RECORD([Standard Photos];$StdPhotLoop_L)ut_Message ("Standard Photos records "+String($StdPhotLoop_L)+" of "+String($RecordsInStdPhoto_L)+" - ID:"+String([Standard Photos]StdPhotoID)+×sCR)$UpdateRecord_b:=TrueCase of : ($NewMaximoInsection_b): ([Standard Photos]ModTimeStamp_s#"")Ê&Ê([Standard Photos]maximo_UpdateTimeStamp_s=""): ([Standard Photos]ModTimeStamp_s<[Standard Photos]maximo_UpdateTimeStamp_s)$UpdateRecord_b:=FalseEnd case If ($UpdateRecord_b)If (ut_LoadRecord (->[Standard Photos];5))$StdPhotoID_L:=[Standard Photos]StdPhotoIDCase of : ([Standard Photos]PictType=BMS Photo )$StdPhotoDesciption_s:="Photo ": ([Standard Photos]PictType=BMS Sketch )$StdPhotoDesciption_s:="Sketch ": ([Standard Photos]PictType=BMS Chart )$StdPhotoDesciption_s:="Chart "Else $StdPhotoDesciption_s:="Unknown "End case $StdPhotoDesciption_s:=$StdPhotoDesciption_s+String([Standard Photos]SeqNum)$FindPosition_L:=Find in array($StandardPhotoIDS_aL;$StdPhotoID_L)PICTURE TO BLOB([Standard Photos]Std Photo;$StdPhotoPicture_blb;"JPEG")$PFlag_txt:="N"If ($FindPosition_L>0)ÊÊ`photo ID exists in maximo dbDELETE FROM ARRAY($StandardPhotoIDS_aL;$FindPosition_L;1)$PFlag_txt:="U"ÊÊ` mark it as an Updateut_Message (".... Updating STANDARDPHOTOS_4D.."+Char(13))ON ERR CALL("SQL_ERROR")SQL EXECUTE("update STANDARDPHOTOS_4D set DESCRIPTION = :$StdPhotoDesciption_s, STANDARDPHOTO = :$StdPhotoPicture_blb, PROCESSED = 'U' WHERE STANDARDPHOTOID = :$StdPhotoID_L ;")SQL CANCEL LOADIf (False)Begin SQLupdate STANDARDPHOTOS_4Dset DESCRIPTION = :$StdPhotoDesciption_s,STANDARDPHOTO = :$StdPhotoPicture_blb, PROCESSED = :$PFlag_txtWHERE STANDARDPHOTOID = $StdPhotoID_L;End SQLEnd if ON ERR CALL("")Else ut_Message (".... Inserting New in STANDARDPHOTOS_4D.."+Char(13))ON ERR CALL("SQL_ERROR")SQL EXECUTE("insert into STANDARDPHOTOS_4D (DESCRIPTION, INSPID, STANDARDPHOTO, STANDARDPHOTOID, PROCESSED ) values (:$StdPhotoDesciption_s, :$INSPID_L, :$StdPhotoPicture_blb , :$StdPhotoID_L,"+" :$PFlag_txt) ; ")SQL CANCEL LOADON ERR CALL("")End if If (Not(SQLError_b))[Standard Photos]maximo_UpdateTimeStamp_s:=Substring(ut_ReturnTimeStampFromDate (Current date(*);Current time(*));1;12)SAVE RECORD([Standard Photos])End if UNLOAD RECORD([Standard Photos])Else $FindPosition_L:=Find in array($StandardPhotoIDS_aL;[Standard Photos]StdPhotoID)If ($FindPosition_L>0)DELETE FROM ARRAY($StandardPhotoIDS_aL;$FindPosition_L;1)End if End if Else $FindPosition_L:=Find in array($StandardPhotoIDS_aL;[Standard Photos]StdPhotoID)If ($FindPosition_L>0)DELETE FROM ARRAY($StandardPhotoIDS_aL;$FindPosition_L;1)End if End if $StdPhotLoop_L:=$StdPhotLoop_L+1Until (($StdPhotLoop_L>$RecordsInStdPhoto_L)Ê|Ê(SQLError_b))End if If (Not(SQLError_b))If (Size of array($StandardPhotoIDS_aL)>0)ÊÊ`there are elements in maximo that we do not have$PFlag_txt:="D"$StdPhotLoop_L:=1If (Not(SQLError_b))Repeat $StdPhotoID_L:=$StandardPhotoIDS_aL{$StdPhotLoop_L}ut_Message (".... Marking as Deleted  in STANDARDPHOTOS_4D photo ID "+String($StdPhotoID_L)+Char(13))ÊÊ`SQL EXECUTE("update STANDARDPHOTOS_4D set PROCESSED = :$PFlag_txt where STANDARDPHOTOID = :$StdPhotoID_L;")ON ERR CALL("SQL_ERROR")SQL EXECUTE("update STANDARDPHOTOS_4D set PROCESSED = 'D' where STANDARDPHOTOID = :$StdPhotoID_L;")SQL CANCEL LOADON ERR CALL("")If (False)Begin SQLupdate STANDARDPHOTOS_4Dset PROCESSED = :$PFlag_txtwhere STANDARDPHOTOID = $StdPhotoID_L;End SQLEnd if $StdPhotLoop_L:=$StdPhotLoop_L+1Until (($StdPhotLoop_L>Size of array($StandardPhotoIDS_aL))Ê|ÊSQLError_b)End if End if End if If (Not(SQLError_b))[Inspections]UpdateMaximo_L:=2[Inspections]UpdateMaximo_d:=Current date(*)ÊÊ`SAVESAVE RECORD([Inspections])End if End if UNLOAD RECORD([Inspections])End if End case End if $Loop_L:=$Loop_L+1If (vbOnScreenMessage)If (($Loop_L%$Interval_L=0)Ê|Ê($Loop_L=$NumberInspectionRecords_L)Ê|Ê(($NumberInspectionRecords_L-$Loop_L)<10))ÊÊ`Don't slow down things just to displayUpdateProgress ($Loop_L;$NumberInspectionRecords_L)End if CALL PROCESS(×ProgressPID)End if Case of : (×vCancel)Ê&Ê(Not(SQLError_b))ut_Message (×sCR+"Maximo Data transfer is being cancelled!"+×sCR): (SQLError_b)ut_Message ("* * * * * * * * * * * "+×sCR)ut_Message ("Maximo Data transfer failed due to following SQL error(s)É"+×sCR)For ($Loop_L;1;Size of array(SQL_InternalDescriptions_atxt))ut_Message (SQL_InternalDescriptions_atxt{$Loop_L}+×sCR)End for ut_Message ("* * * * * * * * * * * "+×sCR)End case Until (SQLError_b)Ê|Ê($Loop_L>$NumberInspectionRecords_L)Ê|Ê(×vCancel)vDUplFinishDate:=Current date(*)vTUplFinishTime:=Current time(*)C_TIME($Elapsed_tm)$Elapsed_tm:=fElapsedTime (vDUplStartDate;vTUplStartTime;vDUplFinishDate;vTUplFinishTime)C_TEXT($msg)$msg:="Upload ended at "+String(vDUplFinishDate;Internal date short special )+" - "+String(vTUplFinishTime;HH MM SS )+×sCR$msg:=$msg+"Upload Time Elapsed : "+String($Elapsed_tm;Hour Min Sec )+×sCRIf (vbToFileMessage)ut_Message ($msg)End if ut_CloseMessage End if End if If ($OkToProceed_b)SQL LOGOUTEnd if ÊÊ`End maximo_UpdateMaximo