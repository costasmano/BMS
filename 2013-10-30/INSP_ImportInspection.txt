  ` Method: Method: INSP_ImportInspection  ` Description  ` Import an Inspection from a file.  `  ` Parameters  ` ----------------------------------------------------If (False)  ` ----------------------------------------------------  ` User name (OS): costasmanousakis  ` User name (4D): Designer  ` Date and time: 11/18/05, 09:19:26  ` ----------------------------------------------------Mods_2005_CM19   ` Modified by: costasmanousakis-(Designer)-(12/13/2005 11:59:49)Mods_2005_CM20   ` Modified by: Costas Manousakis-(Designer)-(10/30/13 17:12:28)Mods_2013_10   `  `Added importing of [TunnelInspection] record and additional warning at the end of the import  `  `regarding the personnel. It will have to be verified if the data file is not the same as the exportEnd if SET CHANNEL(10;"")C_STRING(3;$CurrBIN)$CurrBIN:=[Bridge MHD NBIS]BINIf (Ok=1)C_TEXT($ExportHeader)RECEIVE VARIABLE($ExportHeader)If ($ExportHeader#"InspectionExport")ALERT("File <"+Document+"> NOT A VALID MHD BMS Inspection Export data file!!")Else RECEIVE RECORD([Inspections])If ([Inspections]BIN=$CurrBIN)  `Get the Table Number of [Inspections] tableC_LONGINT($InspTable;$ElmtTable;$ImgTable;$Num_I_Fields;$Num_El_Fields;$Num_Img_Fields;$BMSTable;$Num_BMS_Fields)C_LONGINT($CUSTable;$Num_CUS_Fields;$CombTable;$Num_Comb_Fields)$InspTable:=Table(->[Inspections])$Num_I_Fields:=Get last field number($InspTable)ARRAY POINTER($a_Ptr_InspFields;$Num_I_Fields)For ($i;1;$Num_I_Fields)$a_Ptr_InspFields{$i}:=Field($InspTable;$i)End for $ImgTable:=Table(->[Standard Photos])$Num_Img_Fields:=Get last field number(->[Standard Photos])ARRAY POINTER($a_Ptr_ImgFields;$Num_Img_Fields)For ($i;1;$Num_Img_Fields)$a_Ptr_ImgFields{$i}:=Field($ImgTable;$i)End for $BMSTable:=Table(->[BMS Inspections])$Num_BMS_Fields:=Get last field number(->[BMS Inspections])ARRAY POINTER($a_Ptr_BMSFields;$Num_BMS_Fields)For ($i;1;$Num_BMS_Fields)$a_Ptr_BMSFields{$i}:=Field($BMSTable;$i)End for $CUSTable:=Table(->[Cond Units])$Num_CUS_Fields:=Get last field number(->[Cond Units])ARRAY POINTER($a_Ptr_CUFields;$Num_CUS_Fields)For ($i;1;$Num_CUS_Fields)$a_Ptr_CUFields{$i}:=Field($CUSTable;$i)End for $CombTable:=Table(->[Combined Inspections])$Num_Comb_Fields:=Get last field number(->[Combined Inspections])ARRAY POINTER($a_Ptr_CombFields;$Num_Comb_Fields)For ($i;1;$Num_Comb_Fields)$a_Ptr_CombFields{$i}:=Field($CombTable;$i)End for $ElmtTable:=Table(->[ElementsSafety])$Num_El_Fields:=Get last field number(->[ElementsSafety])ARRAY POINTER($a_Ptr_ElFields;$Num_El_Fields)For ($i;1;$Num_El_Fields)$a_Ptr_ElFields{$i}:=Field($ElmtTable;$i)End for C_LONGINT($TunnelInspTbl;$Num_Tnl_Fields)$TunnelInspTbl:=Table(->[TunnelInspection])$Num_Tnl_Fields:=Get last field number(->[TunnelInspection])ARRAY POINTER($a_Ptr_TNLFields;$Num_Tnl_Fields)For ($i;1;$Num_Tnl_Fields)$a_Ptr_TNLFields{$i}:=Field($TunnelInspTbl;$i)End for SHORT_MESSAGE ("Importing Inspection...")C_LONGINT($NumTeam_L;$NumElmts_L;$NumPhotos_L;$NumPontisElmt_L;$NumPontisTm_L;$i;$j;$viFldType)C_TEXT($vtSkipFields;$FieldName)Inc_Sequence ("Inspections";->[Inspections]InspID)SAVE RECORD([Inspections])LogNewRecord (->[Bridge MHD NBIS]BIN;->[Inspections]BIN;->[Inspections]InspID;1;"Inspections")InitChangeStack (1)C_INTEGER($viFldType)For ($i;1;$Num_I_Fields)$FieldName:=Field name($a_Ptr_InspFields{$i})If (($FieldName#"InspID") & ($FieldName#"BIN"))  `Skip BIN and INSPIDGET FIELD PROPERTIES($a_Ptr_InspFields{$i};$viFldType)If ($viFldType#Is Subtable )  `AND subtablesPushChange (1;$a_Ptr_InspFields{$i})End if End if End for FlushGrpChgs (1;->[Bridge MHD NBIS]BIN;->[Inspections]BIN;->[Inspections]InspID;1)RECEIVE VARIABLE($NumTeam_L)If ($NumTeam_L>0)MESSAGE(◊sCR+"Loading Team..")For ($i;1;$NumTeam_L)MESSAGE(String($i)+" of "+String($NumTeam_L)+".. ")RECEIVE RECORD([Field Trip])[Field Trip]InspID:=[Inspections]InspIDSAVE RECORD([Field Trip])LogNewRecord (->[Inspections]InspID;->[Field Trip]InspID;->[Field Trip]Person ID;3;"";->[Personnel]Person ID)End for End if RECEIVE VARIABLE($NumElmts_L)If ($NumElmts_L>0)MESSAGE(◊sCR+"Loading Elements..")For ($i;1;$NumElmts_L)MESSAGE(String($i)+" of "+String($NumElmts_L)+".. ")RECEIVE RECORD([ElementsSafety])Inc_Sequence ("ElementsSafety";->[ElementsSafety]ElmSafetyID)[ElementsSafety]InspID:=[Inspections]InspIDSAVE RECORD([ElementsSafety])LogNewRecord (->[Inspections]InspID;->[ElementsSafety]InspID;->[ElementsSafety]ElmSafetyID;2;"ElementsSafety")InitChangeStack (1)For ($j;1;$Num_El_Fields)$FieldName:=Field name($a_Ptr_ElFields{$j})If (($FieldName#"InspID") & ($FieldName#"ElmSafetyID"))  `Skip IdsPushChange (1;$a_Ptr_ElFields{$j})End if End for FlushGrpChgs (1;->[Inspections]InspID;->[ElementsSafety]InspID;->[ElementsSafety]ElmSafetyID;2)End for End if RECEIVE VARIABLE($NumPhotos_L)If ($NumPhotos_L>0)MESSAGE(◊sCR+"Loading Images..")For ($i;1;$NumPhotos_L)MESSAGE(String($i)+" of "+String($NumPhotos_L)+".. ")RECEIVE RECORD([Standard Photos])Inc_Sequence ("StandardPhotos";->[Standard Photos]StdPhotoID)[Standard Photos]InspID:=[Inspections]InspIDSAVE RECORD([Standard Photos])  ` log the change/duplication hereLogNewRecord (->[Inspections]InspID;->[Standard Photos]InspID;->[Standard Photos]StdPhotoID;2;"StandardPhotos")InitChangeStack (1)For ($j;1;$Num_Img_Fields)$FieldName:=Field name($a_Ptr_ImgFields{$j})If (($FieldName#"InspID") & ($FieldName#"StdPhotoID"))  `Skip IdsPushChange (1;$a_Ptr_ImgFields{$j})End if End for FlushGrpChgs (1;->[Inspections]InspID;->[Standard Photos]InspID;->[Standard Photos]StdPhotoID;2)End for End if C_LONGINT($BMSInspID_L)RECEIVE VARIABLE($BMSInspID_L)If ($BMSInspID_L>0)MESSAGE(◊sCR+"Loading Pontis Insp..")RECEIVE RECORD([BMS Inspections])Inc_Sequence ("Pontis Insp ID";->[BMS Inspections]Inspection ID)SAVE RECORD([BMS Inspections])$BMSInspID_L:=[BMS Inspections]Inspection IDLogNewRecord (->[Bridge MHD NBIS]BIN;->[BMS Inspections]BIN;->[BMS Inspections]Inspection ID;1;"Pontis Insp ID")$vtSkipFields:=";Inspection ID;BIN;"InitChangeStack (1)For ($i;1;$Num_BMS_Fields)$FieldName:=Field name($a_Ptr_BMSFields{$i})If (Position((";"+$FieldName+";");$vtSkipFields)=0)GET FIELD PROPERTIES($a_Ptr_BMSFields{$i};$viFldType)If ($viFldType#Is Subtable )  `AND subtablesPushChange (1;$a_Ptr_BMSFields{$i})End if End if End for FlushGrpChgs (1;->[Bridge MHD NBIS]BIN;->[BMS Inspections]BIN;->[BMS Inspections]Inspection ID;1)RECEIVE VARIABLE($NumElmts_L)If ($NumElmts_L>0)MESSAGE(◊sCR+"Loading Pontis Elmts..")For ($i;1;$NumElmts_L)MESSAGE(String($i)+" of "+String($NumElmts_L)+".. ")RECEIVE RECORD([Cond Units])Inc_Sequence ("Cond Unit ID";->[Cond Units]Cond Unit ID)[Cond Units]Inspection ID:=[BMS Inspections]Inspection IDSAVE RECORD([Cond Units])LogNewRecord (->[BMS Inspections]Inspection ID;->[Cond Units]Inspection ID;->[Cond Units]Cond Unit ID;2;"Cond Unit ID")InitChangeStack (1)For ($j;1;$Num_CUS_Fields)$FieldName:=Field name($a_Ptr_CUFields{$j})If (($FieldName#"Inspection ID") & ($FieldName#"Cond Unit ID"))  `Skip IdsPushChange (1;$a_Ptr_CUFields{$j})End if End for FlushGrpChgs (1;->[BMS Inspections]Inspection ID;->[Cond Units]Inspection ID;->[Cond Units]Cond Unit ID;2)End for End if RECEIVE VARIABLE($NumTeam_L)If ($NumTeam_L>0)MESSAGE(◊sCR+"Loading Pontis Tm..")For ($i;1;$NumTeam_L)MESSAGE(String($i)+" of "+String($NumTeam_L)+".. ")RECEIVE RECORD([BMS Field Trip])[BMS Field Trip]Inspection ID:=[BMS Inspections]Inspection IDSAVE RECORD([BMS Field Trip])LogNewRecord (->[BMS Inspections]Inspection ID;->[BMS Field Trip]Inspection ID;->[BMS Field Trip]Person ID;3;"";->[Personnel]Person ID)End for End if End if MESSAGE(◊sCR+"Loading Combine Record..")RECEIVE RECORD([Combined Inspections])Inc_Sequence ("CombinedInspections";->[Combined Inspections]ID)[Combined Inspections]NBISInspID:=[Inspections]InspID[Combined Inspections]BMSInspID:=$BMSInspID_LSAVE RECORD([Combined Inspections])LogNewRecord (->[Bridge MHD NBIS]BIN;->[Combined Inspections]BIN;->[Combined Inspections]ID;1;"CombinedInspections")$vtSkipFields:=";ID;BIN;NBISInspID;BMSInspID;"For ($i;1;$Num_Comb_Fields)$FieldName:=Field name($a_Ptr_CombFields{$i})If (Position((";"+$FieldName+";");$vtSkipFields)=0)  `Skip BIN and INSPIDGET FIELD PROPERTIES($a_Ptr_CombFields{$i};$viFldType)If ($viFldType#Is Subtable )  `AND subtablesPushChange (1;$a_Ptr_CombFields{$i})End if End if End for FlushGrpChgs (1;->[Bridge MHD NBIS]BIN;->[Combined Inspections]BIN;->[Combined Inspections]ID;1)LogLink (->[Combined Inspections]NBISInspID;->[Bridge MHD NBIS]BIN;->[Combined Inspections]BIN;->[Combined Inspections]ID;1)LogLink (->[Combined Inspections]BMSInspID;->[Bridge MHD NBIS]BIN;->[Combined Inspections]BIN;->[Combined Inspections]ID;1)C_LONGINT($tunnelInspID_L)RECEIVE VARIABLE($tunnelInspID_L)If ($tunnelInspID_L>0)MESSAGE(◊sCR+"Loading Tunnel Inspection Record..")RECEIVE RECORD([TunnelInspection])Inc_Sequence ("TunnelInspection";->[TunnelInspection]TunnelInspID_L)[TunnelInspection]InspID:=[Inspections]InspIDLogNewRecord (->[Inspections]InspID;->[TunnelInspection]InspID;->[TunnelInspection]TunnelInspID_L;2;"TunnelInspection")$vtSkipFields:=";InspID;TunnelInspID_L;QA_QC_L;"For ($i;1;$Num_Tnl_Fields)$FieldName:=Field name($a_Ptr_TNLFields{$i})If (Position((";"+$FieldName+";");$vtSkipFields)=0)  `Skip BIN and INSPIDGET FIELD PROPERTIES($a_Ptr_TNLFields{$i};$viFldType)If ($viFldType#Is Subtable )  `AND subtablesPushChange (1;$a_Ptr_TNLFields{$i})End if End if End for FlushGrpChgs (1;->[Inspections]InspID;->[TunnelInspection]InspID;->[TunnelInspection]TunnelInspID_L;2)If ([TunnelInspection]QA_QC_L>0)LogLink (->[TunnelInspection]QA_QC_L;->[Inspections]InspID;->[TunnelInspection]InspID;->[TunnelInspection]TunnelInspID_L;2;->[Personnel]Person ID)Else LogChanges (->[TunnelInspection]QA_QC_L;->[Inspections]InspID;->[TunnelInspection]InspID;->[TunnelInspection]TunnelInspID_L;2)End if SAVE RECORD([TunnelInspection])End if CLOSE WINDOWC_TEXT($msg_txt)$msg_txt:="Loaded inspection "+[Inspections]Insp Type+" for BIN "+[Inspections]BIN+" dated "+String([Inspections]Insp Date)+" from file <"+Document+">"$msg_txt:=$msg_txt+Char(13)+"If the export is not from the current data file, personnel might not be identified correctly "$msg_txt:=$msg_txt+"and would need to be corrected before doing any data transfers!"ALERT($msg_txt)Else ALERT("Inspection BIN "+[Inspections]BIN+" not for Current BIN "+$CurrBIN)End if End if SET CHANNEL(11)End if 