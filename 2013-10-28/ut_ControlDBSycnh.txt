ÊÊ` ----------------------------------------------------ÊÊ` User name (OS): Charles MillerÊÊ` Date and time: 02/18/10, 12:13:14ÊÊ` ----------------------------------------------------ÊÊ` Method: ut_ControlDBSycnhÊÊ` DescriptionÊÊ` This method is the SQL replacement for NewTell server method whcih used 4D opeenÊÊ`This method controls upload of data from calling db to appropriate server and then download from that server to local dbÊÊ` ParametersÊÊ` ----------------------------------------------------ÊÊ`$1 integer passed in as a 1, 2 or 3ÊÊ`when = 1 or 3 display on screenÊÊ`when 2 or 3 write log fileÊÊ`$2 when passed in is the password (This occurs only during automated  processing)If (False)Mods_OPNToSQLUpgrade ÊÊ`4D Open to SQL conversionÊÊ`Modified by: Charles Miller (8/11/10 11:44:04)ÊÊ`Ugrade to v11ÊÊ`Modified by: Charles Miller (5/10/11 15:18:58)ÊÊ`Modify how (Not(4DError_b))ÊandÊ(Not(SQLError_b)) handled replace with (ut_fTestForSQLor4DError)ÊÊ`Modified by: Charles Miller (11/4/11 11:13:35)ÊÊ` Modified by: Costas Manousakis-(Designer)-(10/28/13 14:24:19)Mods_2013_10 ÊÊ`ÊÊ`Don't call SQL_RetrieveNextID for NRC records if the Sequence name is blank - Happens with Railinforecords, Tunnelinfo or other bridge related recordsEnd if COMPILER_forSQL Compiler_FieldVariables ut_InitFieldArray C_INTEGER($viOnScreen)$viOnScreen:=3AbortDueToLockedRecord_b:=FalseIf (Count parameters>0)C_INTEGER($1)$viOnScreen:=$1If (Count parameters>1)C_STRING(80;$2)End if End if C_BOOLEAN($TransferOk;$vbServConnOK)C_STRING(80;$UserName;$Password)C_LONGINT($i;$NumberRecords_l;$Interval;$Lpid;$Error_l)ÊÊ`Added to get transfer rate...    C_DATE($Start_d;$End_d)C_TIME($Start_tm;$Finish_tm;$Elapsed_tm)C_LONGINT($vStartMsgCycleNo_L;$InternalNumber_l)$vStartMsgCycleNo_L:=×MessageFileCycle_LSQLError_b:=False4DError_b:=FalseInWHKRUpdate_b:=FalseIf (Count parameters>=1)$viOnScreen:=$1Else $viOnScreen:=3ÊÊ`3= on screen msgs only×MessageFileCycle_L:=3ÊÊ`set msg cycle to 3 for user interactive execution.End if C_DATE(vDUplStartDate;vDUplFinishDate)C_TIME(vTUplStartTime;vTUplFinishTime;$eTime)vbOnScreenMessage:=(($viOnScreen=1)Ê|Ê($viOnScreen=3))vbToFileMessage:=(($viOnScreen=2)Ê|Ê($viOnScreen=3))ÊÊ`Verify Tx LockIf ((×LockUserTx)Ê&Ê(×TxUserName#Current user))If (vbOnScreenMessage)ALERT("Sorry! You are not authorized to send or receive any data!")End if ABORTEnd if C_LONGINT($viNumWindows)$viNumWindows:=Size of array(×asWindows)If (($viNumWindows>1)Ê&Ê(Current user#"BMSEXternal@"))C_TEXT($msg)$msg:=""For ($i;1;$viNumWindows)If (×asWindows{$i}#"Splash@")$msg:=$msg+×asWindows{$i}+", "End if End for $msg:=Substring($msg;1;(Length($msg)-2))$msg:="You are about to execute a transfer and have "+String($viNumWindows-1)+" windows ("+$msg+") open!"+×sCR$msg:=$msg+"Please make sure all open windows are either closed or at least returned to their"+" original list form! "$msg:=$msg+"Then you can click the 'Continue' button on this dialog. "+×sCR$msg:=$msg+"This is to avoid not receiving all information coming from the server."G_MyConfirm ($msg;"Continue";"Cancel")If (OK#1)ABORTEnd if $msg:=""End if $Password:=""vsPassword:=""If (Count parameters=2)$Password:=$2End if ut_SetMessageDir ("DataTransfers")ut_StartMessage ($viOnScreen;"Upload Log";600;300;Regular window )$Error_l:=ut_SQLMakeConnnection (Current user;$Password;×DestIP;Current user+", you are about to transfer data to the remote database.")$TransferOk:=FalseIf ($Error_l=1)$Error_l:=ut_TestServerStructureName End if If ($Error_l=1)ÊÊ`connection made$Password:=vsPassword$Lpid:=LProcessID ("$Logoff")ÊÊ`Is there a logoff checkerIf ($Lpid>0)ON EVENT CALL("")ÊÊ`Turn off the event handler if onPAUSE PROCESS($Lpid)End if C_LONGINT($RecordCount_l)$RecordCount_l:=0SET QUERY DESTINATION(Into variable ;$RecordCount_l)QUERY([Activity Log];[Activity Log]Status=0;*)QUERY([Activity Log];Ê&Ê;[Activity Log]Destination=×Destination)SET QUERY DESTINATION(Into current selection )×vCancel:=FalsevDUplStartDate:=Current date(*)vTUplStartTime:=Current time(*)$msg:="Upload started at "+String(vDUplStartDate;Internal date short special )+" - "+String(vTUplStartTime;HH MM SS )+×sCRIf (vbToFileMessage)ut_Message ($msg)End if If ($RecordCount_l>0)If (Not(SQLError_b))ÊÊ`connection madePLAY("ConEstablished")SQLError_b:=False4DError_b:=False$vbServConnOK:=TrueÊÊ`Get the number of fields in the activity log fileActFileID_l:=Table(->[Activity Log])OwnerFileID_l:=Table(->[Owners of Data])ÊÊ`Get the profile of the Owers of Data fileOwnerRef_l:=Field(->[Owners of Data]RefID)OwnerName_l:=Field(->[Owners of Data]Owner Name)ÊÊ`...Perform data syncronizationÊÊ`* * * Look for untransferred data for set destination  * * *QUERY([Activity Log];[Activity Log]Status=0;*)QUERY([Activity Log];Ê&Ê;[Activity Log]Destination=×Destination)ORDER BY([Activity Log];[Activity Log]RefID;>)$NumberRecords_l:=Records in selection([Activity Log])If ($NumberRecords_l>0)×vCancel:=FalseÊÊ`ON EVENT CALL("CancelJob")PLAY("SynchMachines")If (vbOnScreenMessage)×ProgressPID:=StartProgress ("Upload";"Button";"Sending Data to Server")$Interval:=MaxNum (MinNum (Int($NumberRecords_l/40);20);2)ÊÊ` get an update interval between 2 and 20UpdateProgress (0;$NumberRecords_l)ÊÊ`start itEnd if FIRST RECORD([Activity Log])C_BOOLEAN($BackupRunning_b)$InternalNumber_l:=0For ($i;1;$NumberRecords_l)DeletionOK_b:=True$BackupRunning_b:=FalseIf (Not(×vCancel))$BackupRunning_b:=ut_CheckForBackup End if If (×vCancel)Ê|Ê($BackupRunning_b)Ê|Ê(SQLError_b)Ê|Ê(4DError_b)Ê|Ê(AbortDueToLockedRecord_b)×vCancel:=TrueÊÊ`set to make sure next step does not run if cancelled hereut_Message (×sCR+"Data transfer is being cancelled!"+×sCR)$i:=$NumberRecords_l+1$InternalNumber_l:=-999Case of : ($BackupRunning_b)$InternalNumber_l:=-777: (AbortDueToLockedRecord_b)$InternalNumber_l:=-555: (SQLError_b)$InternalNumber_l:=-888: (4DError_b)$InternalNumber_l:=-666End case Else C_LONGINT(RemoteActivityID_l;RemoteUniquekey_l)RemoteActivityID_l:=SQL_RetrieveNextID ("Activity Log")If ([Activity Log]Activity Type="NRC")If ([Activity Log]RefIDType#3)C_TEXT($SeqName_txt)BLOB TO VARIABLE([Activity Log]Data;$SeqName_txt)If ($SeqName_txt#"")RemoteUniquekey_l:=SQL_RetrieveNextID ($SeqName_txt)End if Else RemoteUniquekey_l:=Num(aLookUpDest ([Activity Log]File Number;[Activity Log]Local ID;×Destination))If (RemoteUniquekey_l=0)RemoteUniquekey_l:=Num([Activity Log]Local ID)End if End if End if ut_SQLExecuteNoReturn ("START")START TRANSACTIONClear_FieldVariables ([Activity Log]FileID Local)InGroupDelete_b:=FalseIf ($InternalNumber_l=0)ut_Message ("Act Log entry "+String($i)+" of "+String($NumberRecords_l)+" - ID:"+String([Activity Log]RefID)+×sCR)Case of : ([Activity Log]Activity Type="FLD")ÊÊ`Update a fieldut_Message ("Searching record to updateÉ"+×sCR)ut_SQLTellServerField ÊÊ`TellServerFld ($ConnID;$numflds;$ActFileID;$OwnerFileID;$OwnerRef;$OwnerName): ([Activity Log]Activity Type="NRC")ÊÊ`Create a new recordut_Message ("Creating new recordÉ"+×sCR)ut_SQLTellServerNRC ÊÊ`TellServerNRC ($ConnID;$numflds;$ActFileID;$OwnerFileID;$OwnerRef;$OwnerName): ([Activity Log]Activity Type="DRC")ÊÊ`Delete a recordut_Message ("Deleting recordÉ"+×sCR)ut_SQLTellServerDRC ÊÊ`TellServerDRC ($ConnID;$numflds;$ActFileID;$OwnerFileID;$OwnerRef;$OwnerName): ([Activity Log]Activity Type="GRP")ÊÊ`Update a group of field in a  recordut_Message ("Searching record to group updateÉ"+×sCR)ut_SQLTellServerGrp_2 ÊÊ`TellServerGrp_2 ($ConnID;$numflds;$ActFileID;$OwnerFileID;$OwnerRef;$OwnerName): ([Activity Log]Activity Type="GRD")ÊÊ`Delete a group of recordsut_Message ("Searching records to group DeleteÉ"+×sCR)InGroupDelete_b:=Trueut_SQLTellServerGRD ÊÊ`TellServerGRD ($ConnID;$numflds;$ActFileID;$OwnerFileID;$OwnerRef;$OwnerName)ÊÊ`2004-08-11 ASL added to handle links: ([Activity Log]Activity Type="LNK")ÊÊ`Update a linkut_Message ("Updating a linkÉ"+×sCR)ut_SQLTellServerField ÊÊ`TellServerLNK ($ConnID;$numflds;$ActFileID;$OwnerFileID;$OwnerRef;$OwnerName)End case FLUSH BUFFERSÊÊ`Save status info immediately!If ((ut_fTestForSQLor4DError )Ê&Ê(DeletionOK_b)Ê&Ê(Not(AbortDueToLockedRecord_b)))ut_SQLExecuteNoReturn ("COMMIT")If (Not(SQLError_b))VALIDATE TRANSACTIONElse CANCEL TRANSACTION$i:=$NumberRecords_l+1End if Else ut_SQLExecuteNoReturn ("ROLLBACK")CANCEL TRANSACTIONIf (Not(DeletionOK_b))Else $i:=$NumberRecords_l+1End if End if NEXT RECORD([Activity Log])Else SQLError_b:=Trueut_SQLExecuteNoReturn ("ROLLBACK")CANCEL TRANSACTION$i:=$NumberRecords_l+1End if End if Case of : (SQLError_b): (AbortDueToLockedRecord_b)Else If (vbOnScreenMessage)If (($i%$Interval=0)Ê|Ê($i=$NumberRecords_l))ÊÊ`Don't slow down things just to displayUpdateProgress ($i;$NumberRecords_l)End if End if End case ÊÊ` check to see if aborted from the Progress windowIf (×Abort)×vCancel:=TrueEnd if End for If (vbOnScreenMessage)CALL PROCESS(×ProgressPID)End if ÊÊ` ON EVENT CALL("")ÊÊ`unload recordsUNLOAD RECORD([Activity Log])UNLOAD RECORD([Owners of Data])G_CloseAllTables ÊÊ`close all tables...  $TransferOk:=FalseCase of : ($BackupRunning_b)PLAY("ConAbort")ut_Message ("* * * * * * * * * * * "+×sCR)ut_Message ("Data transfer cancelled. Backup running..."+×sCR)ut_Message ("* * * * * * * * * * * "+×sCR): (SQLError_b)PLAY("ConAbort")ut_Message ("* * * * * * * * * * * "+×sCR)ut_Message ("Data transfer failed due to SQL errorÉ["+String($InternalNumber_l)+"]"+×sCR)ut_Message ("* * * * * * * * * * * "+×sCR)ALERT("Notify Costas as a SQL Error has occurred during transfer"): (4DError_b)PLAY("ConAbort")ut_Message ("* * * * * * * * * * * "+×sCR)ut_Message ("Data transfer failed due to 4D errorÉ["+String($InternalNumber_l)+"]"+×sCR)ut_Message ("* * * * * * * * * * * "+×sCR)ALERT("Notify Costas as a 4D Error has occurred during transfer"): ($InternalNumber_l=-999)PLAY("ConAbort")ut_Message ("* * * * * * * * * * * "+×sCR)ut_Message ("Data transfer cancelledÉ["+String($InternalNumber_l)+"]"+×sCR)ut_Message ("* * * * * * * * * * * "+×sCR): ($InternalNumber_l=-555)Ê|Ê(AbortDueToLockedRecord_b)PLAY("ConAbort")ut_Message ("* * * * * * * * * * * "+×sCR)ut_Message ("Data transfer cancelledÉ["+String($InternalNumber_l)+"] due to locked record."+×sCR)ut_Message ("* * * * * * * * * * * "+×sCR): ($InternalNumber_l=0)ut_Message ("* * * * * * * * * * * "+×sCR)ut_Message ("All data transferredÉNo errors occurred"+×sCR)ut_Message ("* * * * * * * * * * * "+×sCR)$TransferOk:=TrueEnd case If (Not($TransferOk))If (vbOnScreenMessage)UpdateProgress ($i;$NumberRecords_l)CALL PROCESS(×ProgressPID)End if End if Else ut_Message ("There are no records to transfer for destination:"+×Destination+"!"+×sCR)End if ÊÊ`if Records to be transferedut_SQLLogout Else $vbServConnOK:=Falseut_SQLWriteErrorsToLog ("Connection failure: "+Current method name+" for destination: "+×Destination+×sCR)End if vDUplFinishDate:=Current date(*)vTUplFinishTime:=Current time(*)$Elapsed_tm:=fElapsedTime (vDUplStartDate;vTUplStartTime;vDUplFinishDate;vTUplFinishTime)$msg:="Upload ended at "+String(vDUplFinishDate;Internal date short special )+" - "+String(vTUplFinishTime;HH MM SS )+×sCR$msg:=$msg+"Upload Time Elapsed : "+String($Elapsed_tm;Hour Min Sec )+×sCRIf (vbToFileMessage)ut_Message ($msg)End if If (Not(×vCancel)Ê&Ê($TransferOk))If ((×AllowTxRx)Ê&Ê($vbServConnOK))ut_CloseMessage ut_SQLDownloadNewRecords ($Password;$viOnScreen)ÊÊ`XDownLoadServer ($Password;$viOnScreen)ÊÊ`changed from DownLoadServer.Else BEEPIf ($TransferOk)PLAY("Transfer Complete")End if If (vbOnScreenMessage)ÊÊ`display message - ring every 5 min, stop after 2 times = 10 minut_MessageDia ($msg;"Transfer Messages";5;2)End if PLAY("Goodbye")ut_CloseMessage End if If ($Lpid>0)ÊÊ`Restore logoff checker×fUsrPresent:=TrueÊÊ`Set as if the user has been hereRESUME PROCESS($Lpid)End if End if ÊÊ`if Password OKElse ut_Message ("There are no records to transfer for destination:"+×Destination+"!"+×sCR)vDUplFinishDate:=Current date(*)vTUplFinishTime:=Current time(*)ut_CloseMessage ut_SQLDownloadNewRecords ($Password;$viOnScreen)End if ×MessageFileCycle_L:=$vStartMsgCycleNo_LElse ut_CloseMessage Case of : ($Error_l=-2)ALERT("Tranfer cancelled due to invalid password"): ($Error_l=-4)ALERT("Tranfer cancelled due to Password entry screen cancelled"): ($Error_l=-9)ALERT("You are trying to transfer to "+SeverStructureName_txt+" but should be transfering to "+×Destination)End case End if 